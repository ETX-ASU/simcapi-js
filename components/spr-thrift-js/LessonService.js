//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

LessonService_summary_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
  }
};
LessonService_summary_args.prototype = {};
LessonService_summary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_summary_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_summary_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_summary_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_summary_result.prototype = {};
LessonService_summary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.success = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new Lesson();
          elem76.read(input);
          this.success.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_summary_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_summary_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter77 in this.success)
    {
      if (this.success.hasOwnProperty(iter77))
      {
        iter77 = this.success[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_get_args = function(args) {
  this.authToken = null;
  this.lessonid = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
  }
};
LessonService_get_args.prototype = {};
LessonService_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_get_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_get_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 2);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_get_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_get_result.prototype = {};
LessonService_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Lesson();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_get_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_get_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_create_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
  }
};
LessonService_create_args.prototype = {};
LessonService_create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_create_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_create_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_create_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_create_result.prototype = {};
LessonService_create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Lesson();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_create_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_create_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getSolutionTraceGraph_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  this.questionId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
    if (args.questionId !== undefined) {
      this.questionId = args.questionId;
    }
  }
};
LessonService_getSolutionTraceGraph_args.prototype = {};
LessonService_getSolutionTraceGraph_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.questionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getSolutionTraceGraph_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getSolutionTraceGraph_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  if (this.questionId) {
    output.writeFieldBegin('questionId', Thrift.Type.STRING, 3);
    output.writeString(this.questionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getSolutionTraceGraph_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_getSolutionTraceGraph_result.prototype = {};
LessonService_getSolutionTraceGraph_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TrapStateSummary();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getSolutionTraceGraph_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getSolutionTraceGraph_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getCAPIRankStats_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  this.questionId = null;
  this.capiPath = null;
  this.aggregate = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
    if (args.questionId !== undefined) {
      this.questionId = args.questionId;
    }
    if (args.capiPath !== undefined) {
      this.capiPath = args.capiPath;
    }
    if (args.aggregate !== undefined) {
      this.aggregate = args.aggregate;
    }
  }
};
LessonService_getCAPIRankStats_args.prototype = {};
LessonService_getCAPIRankStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.questionId = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = input.readString().value;
          this.questionId.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.capiPath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.aggregate = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getCAPIRankStats_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getCAPIRankStats_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  if (this.questionId) {
    output.writeFieldBegin('questionId', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.questionId.length);
    for (var iter85 in this.questionId)
    {
      if (this.questionId.hasOwnProperty(iter85))
      {
        iter85 = this.questionId[iter85];
        output.writeString(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.capiPath) {
    output.writeFieldBegin('capiPath', Thrift.Type.STRING, 4);
    output.writeString(this.capiPath);
    output.writeFieldEnd();
  }
  if (this.aggregate) {
    output.writeFieldBegin('aggregate', Thrift.Type.I32, 5);
    output.writeI32(this.aggregate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getCAPIRankStats_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_getCAPIRankStats_result.prototype = {};
LessonService_getCAPIRankStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size86 = 0;
        var _rtmp390;
        this.success = {};
        var _ktype87 = 0;
        var _vtype88 = 0;
        _rtmp390 = input.readMapBegin();
        _ktype87 = _rtmp390.ktype;
        _vtype88 = _rtmp390.vtype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          if (_i91 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key92 = null;
          var val93 = null;
          key92 = input.readString().value;
          val93 = new CAPIRankStats();
          val93.read(input);
          this.success[key92] = val93;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getCAPIRankStats_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getCAPIRankStats_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter94 in this.success)
    {
      if (this.success.hasOwnProperty(kiter94))
      {
        var viter95 = this.success[kiter94];
        output.writeString(kiter94);
        viter95.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getCAPICategoryStats_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  this.questionId = null;
  this.capiPath = null;
  this.lastInteraction = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
    if (args.questionId !== undefined) {
      this.questionId = args.questionId;
    }
    if (args.capiPath !== undefined) {
      this.capiPath = args.capiPath;
    }
    if (args.lastInteraction !== undefined) {
      this.lastInteraction = args.lastInteraction;
    }
  }
};
LessonService_getCAPICategoryStats_args.prototype = {};
LessonService_getCAPICategoryStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.questionId = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString().value;
          this.questionId.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.capiPath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.lastInteraction = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getCAPICategoryStats_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getCAPICategoryStats_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  if (this.questionId) {
    output.writeFieldBegin('questionId', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.questionId.length);
    for (var iter103 in this.questionId)
    {
      if (this.questionId.hasOwnProperty(iter103))
      {
        iter103 = this.questionId[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.capiPath) {
    output.writeFieldBegin('capiPath', Thrift.Type.STRING, 4);
    output.writeString(this.capiPath);
    output.writeFieldEnd();
  }
  if (this.lastInteraction) {
    output.writeFieldBegin('lastInteraction', Thrift.Type.BOOL, 5);
    output.writeBool(this.lastInteraction);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getCAPICategoryStats_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_getCAPICategoryStats_result.prototype = {};
LessonService_getCAPICategoryStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = {};
        var _ktype105 = 0;
        var _vtype106 = 0;
        _rtmp3108 = input.readMapBegin();
        _ktype105 = _rtmp3108.ktype;
        _vtype106 = _rtmp3108.vtype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          if (_i109 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key110 = null;
          var val111 = null;
          key110 = input.readString().value;
          val111 = new CAPICategoryStats();
          val111.read(input);
          this.success[key110] = val111;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getCAPICategoryStats_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getCAPICategoryStats_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter112 in this.success)
    {
      if (this.success.hasOwnProperty(kiter112))
      {
        var viter113 = this.success[kiter112];
        output.writeString(kiter112);
        viter113.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getCAPIRecords_args = function(args) {
  this.authToken = null;
  this.query = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
LessonService_getCAPIRecords_args.prototype = {};
LessonService_getCAPIRecords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new CAPIQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getCAPIRecords_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getCAPIRecords_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getCAPIRecords_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_getCAPIRecords_result.prototype = {};
LessonService_getCAPIRecords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = new CAPIRecord();
          elem120.read(input);
          this.success.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getCAPIRecords_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getCAPIRecords_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter121 in this.success)
    {
      if (this.success.hasOwnProperty(iter121))
      {
        iter121 = this.success[iter121];
        iter121.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_enrolMe_args = function(args) {
  this.authToken = null;
  this.lessonid = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
  }
};
LessonService_enrolMe_args.prototype = {};
LessonService_enrolMe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_enrolMe_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_enrolMe_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 2);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_enrolMe_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_enrolMe_result.prototype = {};
LessonService_enrolMe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_enrolMe_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_enrolMe_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_enrol_args = function(args) {
  this.authToken = null;
  this.lessonid = null;
  this.emailAddresses = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
    if (args.emailAddresses !== undefined) {
      this.emailAddresses = args.emailAddresses;
    }
  }
};
LessonService_enrol_args.prototype = {};
LessonService_enrol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size122 = 0;
        var _rtmp3126;
        this.emailAddresses = [];
        var _etype125 = 0;
        _rtmp3126 = input.readListBegin();
        _etype125 = _rtmp3126.etype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var elem128 = null;
          elem128 = input.readString().value;
          this.emailAddresses.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_enrol_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_enrol_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 2);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  if (this.emailAddresses) {
    output.writeFieldBegin('emailAddresses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.emailAddresses.length);
    for (var iter129 in this.emailAddresses)
    {
      if (this.emailAddresses.hasOwnProperty(iter129))
      {
        iter129 = this.emailAddresses[iter129];
        output.writeString(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_enrol_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_enrol_result.prototype = {};
LessonService_enrol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_enrol_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_enrol_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_unenrol_args = function(args) {
  this.authToken = null;
  this.lessonid = null;
  this.userIds = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
    if (args.userIds !== undefined) {
      this.userIds = args.userIds;
    }
  }
};
LessonService_unenrol_args.prototype = {};
LessonService_unenrol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.userIds = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = input.readString().value;
          this.userIds.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_unenrol_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_unenrol_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 2);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  if (this.userIds) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.userIds.length);
    for (var iter137 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter137))
      {
        iter137 = this.userIds[iter137];
        output.writeString(iter137);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_unenrol_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_unenrol_result.prototype = {};
LessonService_unenrol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_unenrol_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_unenrol_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getEnrolments_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
  }
};
LessonService_getEnrolments_args.prototype = {};
LessonService_getEnrolments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getEnrolments_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getEnrolments_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getEnrolments_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_getEnrolments_result.prototype = {};
LessonService_getEnrolments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.success = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = new EnrolmentInfo();
          elem144.read(input);
          this.success.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getEnrolments_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getEnrolments_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter145 in this.success)
    {
      if (this.success.hasOwnProperty(iter145))
      {
        iter145 = this.success[iter145];
        iter145.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getProgressPoints_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
  }
};
LessonService_getProgressPoints_args.prototype = {};
LessonService_getProgressPoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getProgressPoints_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getProgressPoints_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_getProgressPoints_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_getProgressPoints_result.prototype = {};
LessonService_getProgressPoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size146 = 0;
        var _rtmp3150;
        this.success = [];
        var _etype149 = 0;
        _rtmp3150 = input.readListBegin();
        _etype149 = _rtmp3150.etype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var elem152 = null;
          elem152 = new ProgressPoint();
          elem152.read(input);
          this.success.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_getProgressPoints_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_getProgressPoints_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter153 in this.success)
    {
      if (this.success.hasOwnProperty(iter153))
      {
        iter153 = this.success[iter153];
        iter153.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_ltiAssociate_args = function(args) {
  this.authToken = null;
  this.consumerKey = null;
  this.resourceLink = null;
  this.lessonid = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.consumerKey !== undefined) {
      this.consumerKey = args.consumerKey;
    }
    if (args.resourceLink !== undefined) {
      this.resourceLink = args.resourceLink;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
  }
};
LessonService_ltiAssociate_args.prototype = {};
LessonService_ltiAssociate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumerKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.resourceLink = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_ltiAssociate_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_ltiAssociate_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.consumerKey) {
    output.writeFieldBegin('consumerKey', Thrift.Type.STRING, 2);
    output.writeString(this.consumerKey);
    output.writeFieldEnd();
  }
  if (this.resourceLink) {
    output.writeFieldBegin('resourceLink', Thrift.Type.STRING, 3);
    output.writeString(this.resourceLink);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 4);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_ltiAssociate_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_ltiAssociate_result.prototype = {};
LessonService_ltiAssociate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_ltiAssociate_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_ltiAssociate_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_updateBasicInfo_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  this.name = null;
  this.description = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
  }
};
LessonService_updateBasicInfo_args.prototype = {};
LessonService_updateBasicInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_updateBasicInfo_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_updateBasicInfo_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_updateBasicInfo_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_updateBasicInfo_result.prototype = {};
LessonService_updateBasicInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_updateBasicInfo_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_updateBasicInfo_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_copy_args = function(args) {
  this.authToken = null;
  this.lessonid = null;
  this.destName = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
    if (args.destName !== undefined) {
      this.destName = args.destName;
    }
  }
};
LessonService_copy_args.prototype = {};
LessonService_copy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.destName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_copy_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_copy_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 2);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  if (this.destName) {
    output.writeFieldBegin('destName', Thrift.Type.STRING, 3);
    output.writeString(this.destName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_copy_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_copy_result.prototype = {};
LessonService_copy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Lesson();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_copy_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_copy_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_remove_args = function(args) {
  this.authToken = null;
  this.lessonid = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
  }
};
LessonService_remove_args.prototype = {};
LessonService_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_remove_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_remove_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 2);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_remove_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_remove_result.prototype = {};
LessonService_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_remove_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_remove_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_activate_args = function(args) {
  this.authToken = null;
  this.lessonid = null;
  this.options = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
LessonService_activate_args.prototype = {};
LessonService_activate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ActivationOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_activate_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_activate_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 2);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  if (this.options) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_activate_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_activate_result.prototype = {};
LessonService_activate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LessonActivation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_activate_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_activate_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_deactivate_args = function(args) {
  this.authToken = null;
  this.lessonid = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
  }
};
LessonService_deactivate_args.prototype = {};
LessonService_deactivate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_deactivate_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_deactivate_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 2);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_deactivate_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_deactivate_result.prototype = {};
LessonService_deactivate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_deactivate_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_deactivate_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_updateActivationOptions_args = function(args) {
  this.authToken = null;
  this.lessonid = null;
  this.options = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
LessonService_updateActivationOptions_args.prototype = {};
LessonService_updateActivationOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ActivationOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_updateActivationOptions_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_updateActivationOptions_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 2);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  if (this.options) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_updateActivationOptions_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_updateActivationOptions_result.prototype = {};
LessonService_updateActivationOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LessonActivation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_updateActivationOptions_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_updateActivationOptions_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_resetStudentProgress_args = function(args) {
  this.authToken = null;
  this.studentId = null;
  this.lessonid = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.studentId !== undefined) {
      this.studentId = args.studentId;
    }
    if (args.lessonid !== undefined) {
      this.lessonid = args.lessonid;
    }
  }
};
LessonService_resetStudentProgress_args.prototype = {};
LessonService_resetStudentProgress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size154 = 0;
        var _rtmp3158;
        this.studentId = [];
        var _etype157 = 0;
        _rtmp3158 = input.readListBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = input.readString().value;
          this.studentId.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lessonid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_resetStudentProgress_args.prototype.write = function(output) {
  output.writeStructBegin('LessonService_resetStudentProgress_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.studentId) {
    output.writeFieldBegin('studentId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.studentId.length);
    for (var iter161 in this.studentId)
    {
      if (this.studentId.hasOwnProperty(iter161))
      {
        iter161 = this.studentId[iter161];
        output.writeString(iter161);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lessonid) {
    output.writeFieldBegin('lessonid', Thrift.Type.STRING, 3);
    output.writeString(this.lessonid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonService_resetStudentProgress_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
LessonService_resetStudentProgress_result.prototype = {};
LessonService_resetStudentProgress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size162 = 0;
        var _rtmp3166;
        this.success = [];
        var _etype165 = 0;
        _rtmp3166 = input.readListBegin();
        _etype165 = _rtmp3166.etype;
        _size162 = _rtmp3166.size;
        for (var _i167 = 0; _i167 < _size162; ++_i167)
        {
          var elem168 = null;
          elem168 = new ProgressPoint();
          elem168.read(input);
          this.success.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonService_resetStudentProgress_result.prototype.write = function(output) {
  output.writeStructBegin('LessonService_resetStudentProgress_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter169 in this.success)
    {
      if (this.success.hasOwnProperty(iter169))
      {
        iter169 = this.success[iter169];
        iter169.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
LessonServiceClient.prototype = {};
LessonServiceClient.prototype.summary = function(authToken, callback) {
  if (callback === undefined) {
    this.send_summary(authToken);
    return this.recv_summary();
  } else {
    var postData = this.send_summary(authToken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_summary);
  }
};

LessonServiceClient.prototype.send_summary = function(authToken, callback) {
  this.output.writeMessageBegin('summary', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_summary_args();
  args.authToken = authToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_summary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_summary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'summary failed: unknown result';
};
LessonServiceClient.prototype.get = function(authToken, lessonid, callback) {
  if (callback === undefined) {
    this.send_get(authToken, lessonid);
    return this.recv_get();
  } else {
    var postData = this.send_get(authToken, lessonid, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get);
  }
};

LessonServiceClient.prototype.send_get = function(authToken, lessonid, callback) {
  this.output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_get_args();
  args.authToken = authToken;
  args.lessonid = lessonid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_get = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_get_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get failed: unknown result';
};
LessonServiceClient.prototype.create = function(authToken, callback) {
  if (callback === undefined) {
    this.send_create(authToken);
    return this.recv_create();
  } else {
    var postData = this.send_create(authToken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_create);
  }
};

LessonServiceClient.prototype.send_create = function(authToken, callback) {
  this.output.writeMessageBegin('create', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_create_args();
  args.authToken = authToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_create = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_create_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'create failed: unknown result';
};
LessonServiceClient.prototype.getSolutionTraceGraph = function(authToken, lessonId, questionId, callback) {
  if (callback === undefined) {
    this.send_getSolutionTraceGraph(authToken, lessonId, questionId);
    return this.recv_getSolutionTraceGraph();
  } else {
    var postData = this.send_getSolutionTraceGraph(authToken, lessonId, questionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSolutionTraceGraph);
  }
};

LessonServiceClient.prototype.send_getSolutionTraceGraph = function(authToken, lessonId, questionId, callback) {
  this.output.writeMessageBegin('getSolutionTraceGraph', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_getSolutionTraceGraph_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.questionId = questionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_getSolutionTraceGraph = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_getSolutionTraceGraph_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSolutionTraceGraph failed: unknown result';
};
LessonServiceClient.prototype.getCAPIRankStats = function(authToken, lessonId, questionId, capiPath, aggregate, callback) {
  if (callback === undefined) {
    this.send_getCAPIRankStats(authToken, lessonId, questionId, capiPath, aggregate);
    return this.recv_getCAPIRankStats();
  } else {
    var postData = this.send_getCAPIRankStats(authToken, lessonId, questionId, capiPath, aggregate, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCAPIRankStats);
  }
};

LessonServiceClient.prototype.send_getCAPIRankStats = function(authToken, lessonId, questionId, capiPath, aggregate, callback) {
  this.output.writeMessageBegin('getCAPIRankStats', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_getCAPIRankStats_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.questionId = questionId;
  args.capiPath = capiPath;
  args.aggregate = aggregate;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_getCAPIRankStats = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_getCAPIRankStats_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCAPIRankStats failed: unknown result';
};
LessonServiceClient.prototype.getCAPICategoryStats = function(authToken, lessonId, questionId, capiPath, lastInteraction, callback) {
  if (callback === undefined) {
    this.send_getCAPICategoryStats(authToken, lessonId, questionId, capiPath, lastInteraction);
    return this.recv_getCAPICategoryStats();
  } else {
    var postData = this.send_getCAPICategoryStats(authToken, lessonId, questionId, capiPath, lastInteraction, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCAPICategoryStats);
  }
};

LessonServiceClient.prototype.send_getCAPICategoryStats = function(authToken, lessonId, questionId, capiPath, lastInteraction, callback) {
  this.output.writeMessageBegin('getCAPICategoryStats', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_getCAPICategoryStats_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.questionId = questionId;
  args.capiPath = capiPath;
  args.lastInteraction = lastInteraction;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_getCAPICategoryStats = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_getCAPICategoryStats_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCAPICategoryStats failed: unknown result';
};
LessonServiceClient.prototype.getCAPIRecords = function(authToken, query, callback) {
  if (callback === undefined) {
    this.send_getCAPIRecords(authToken, query);
    return this.recv_getCAPIRecords();
  } else {
    var postData = this.send_getCAPIRecords(authToken, query, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCAPIRecords);
  }
};

LessonServiceClient.prototype.send_getCAPIRecords = function(authToken, query, callback) {
  this.output.writeMessageBegin('getCAPIRecords', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_getCAPIRecords_args();
  args.authToken = authToken;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_getCAPIRecords = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_getCAPIRecords_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCAPIRecords failed: unknown result';
};
LessonServiceClient.prototype.enrolMe = function(authToken, lessonid, callback) {
  if (callback === undefined) {
    this.send_enrolMe(authToken, lessonid);
    return this.recv_enrolMe();
  } else {
    var postData = this.send_enrolMe(authToken, lessonid, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_enrolMe);
  }
};

LessonServiceClient.prototype.send_enrolMe = function(authToken, lessonid, callback) {
  this.output.writeMessageBegin('enrolMe', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_enrolMe_args();
  args.authToken = authToken;
  args.lessonid = lessonid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_enrolMe = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_enrolMe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'enrolMe failed: unknown result';
};
LessonServiceClient.prototype.enrol = function(authToken, lessonid, emailAddresses, callback) {
  if (callback === undefined) {
    this.send_enrol(authToken, lessonid, emailAddresses);
    return this.recv_enrol();
  } else {
    var postData = this.send_enrol(authToken, lessonid, emailAddresses, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_enrol);
  }
};

LessonServiceClient.prototype.send_enrol = function(authToken, lessonid, emailAddresses, callback) {
  this.output.writeMessageBegin('enrol', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_enrol_args();
  args.authToken = authToken;
  args.lessonid = lessonid;
  args.emailAddresses = emailAddresses;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_enrol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_enrol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'enrol failed: unknown result';
};
LessonServiceClient.prototype.unenrol = function(authToken, lessonid, userIds, callback) {
  if (callback === undefined) {
    this.send_unenrol(authToken, lessonid, userIds);
    return this.recv_unenrol();
  } else {
    var postData = this.send_unenrol(authToken, lessonid, userIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_unenrol);
  }
};

LessonServiceClient.prototype.send_unenrol = function(authToken, lessonid, userIds, callback) {
  this.output.writeMessageBegin('unenrol', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_unenrol_args();
  args.authToken = authToken;
  args.lessonid = lessonid;
  args.userIds = userIds;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_unenrol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_unenrol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'unenrol failed: unknown result';
};
LessonServiceClient.prototype.getEnrolments = function(authToken, lessonId, callback) {
  if (callback === undefined) {
    this.send_getEnrolments(authToken, lessonId);
    return this.recv_getEnrolments();
  } else {
    var postData = this.send_getEnrolments(authToken, lessonId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getEnrolments);
  }
};

LessonServiceClient.prototype.send_getEnrolments = function(authToken, lessonId, callback) {
  this.output.writeMessageBegin('getEnrolments', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_getEnrolments_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_getEnrolments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_getEnrolments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getEnrolments failed: unknown result';
};
LessonServiceClient.prototype.getProgressPoints = function(authToken, lessonId, callback) {
  if (callback === undefined) {
    this.send_getProgressPoints(authToken, lessonId);
    return this.recv_getProgressPoints();
  } else {
    var postData = this.send_getProgressPoints(authToken, lessonId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getProgressPoints);
  }
};

LessonServiceClient.prototype.send_getProgressPoints = function(authToken, lessonId, callback) {
  this.output.writeMessageBegin('getProgressPoints', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_getProgressPoints_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_getProgressPoints = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_getProgressPoints_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProgressPoints failed: unknown result';
};
LessonServiceClient.prototype.ltiAssociate = function(authToken, consumerKey, resourceLink, lessonid, callback) {
  if (callback === undefined) {
    this.send_ltiAssociate(authToken, consumerKey, resourceLink, lessonid);
    this.recv_ltiAssociate();
  } else {
    var postData = this.send_ltiAssociate(authToken, consumerKey, resourceLink, lessonid, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ltiAssociate);
  }
};

LessonServiceClient.prototype.send_ltiAssociate = function(authToken, consumerKey, resourceLink, lessonid, callback) {
  this.output.writeMessageBegin('ltiAssociate', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_ltiAssociate_args();
  args.authToken = authToken;
  args.consumerKey = consumerKey;
  args.resourceLink = resourceLink;
  args.lessonid = lessonid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_ltiAssociate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_ltiAssociate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
LessonServiceClient.prototype.updateBasicInfo = function(authToken, lessonId, name, description, callback) {
  if (callback === undefined) {
    this.send_updateBasicInfo(authToken, lessonId, name, description);
    this.recv_updateBasicInfo();
  } else {
    var postData = this.send_updateBasicInfo(authToken, lessonId, name, description, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateBasicInfo);
  }
};

LessonServiceClient.prototype.send_updateBasicInfo = function(authToken, lessonId, name, description, callback) {
  this.output.writeMessageBegin('updateBasicInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_updateBasicInfo_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.name = name;
  args.description = description;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_updateBasicInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_updateBasicInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
LessonServiceClient.prototype.copy = function(authToken, lessonid, destName, callback) {
  if (callback === undefined) {
    this.send_copy(authToken, lessonid, destName);
    return this.recv_copy();
  } else {
    var postData = this.send_copy(authToken, lessonid, destName, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_copy);
  }
};

LessonServiceClient.prototype.send_copy = function(authToken, lessonid, destName, callback) {
  this.output.writeMessageBegin('copy', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_copy_args();
  args.authToken = authToken;
  args.lessonid = lessonid;
  args.destName = destName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_copy = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_copy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'copy failed: unknown result';
};
LessonServiceClient.prototype.remove = function(authToken, lessonid, callback) {
  if (callback === undefined) {
    this.send_remove(authToken, lessonid);
    return this.recv_remove();
  } else {
    var postData = this.send_remove(authToken, lessonid, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_remove);
  }
};

LessonServiceClient.prototype.send_remove = function(authToken, lessonid, callback) {
  this.output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_remove_args();
  args.authToken = authToken;
  args.lessonid = lessonid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_remove = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_remove_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'remove failed: unknown result';
};
LessonServiceClient.prototype.activate = function(authToken, lessonid, options, callback) {
  if (callback === undefined) {
    this.send_activate(authToken, lessonid, options);
    return this.recv_activate();
  } else {
    var postData = this.send_activate(authToken, lessonid, options, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_activate);
  }
};

LessonServiceClient.prototype.send_activate = function(authToken, lessonid, options, callback) {
  this.output.writeMessageBegin('activate', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_activate_args();
  args.authToken = authToken;
  args.lessonid = lessonid;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_activate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_activate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'activate failed: unknown result';
};
LessonServiceClient.prototype.deactivate = function(authToken, lessonid, callback) {
  if (callback === undefined) {
    this.send_deactivate(authToken, lessonid);
    return this.recv_deactivate();
  } else {
    var postData = this.send_deactivate(authToken, lessonid, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deactivate);
  }
};

LessonServiceClient.prototype.send_deactivate = function(authToken, lessonid, callback) {
  this.output.writeMessageBegin('deactivate', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_deactivate_args();
  args.authToken = authToken;
  args.lessonid = lessonid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_deactivate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_deactivate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deactivate failed: unknown result';
};
LessonServiceClient.prototype.updateActivationOptions = function(authToken, lessonid, options, callback) {
  if (callback === undefined) {
    this.send_updateActivationOptions(authToken, lessonid, options);
    return this.recv_updateActivationOptions();
  } else {
    var postData = this.send_updateActivationOptions(authToken, lessonid, options, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateActivationOptions);
  }
};

LessonServiceClient.prototype.send_updateActivationOptions = function(authToken, lessonid, options, callback) {
  this.output.writeMessageBegin('updateActivationOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_updateActivationOptions_args();
  args.authToken = authToken;
  args.lessonid = lessonid;
  args.options = options;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_updateActivationOptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_updateActivationOptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateActivationOptions failed: unknown result';
};
LessonServiceClient.prototype.resetStudentProgress = function(authToken, studentId, lessonid, callback) {
  if (callback === undefined) {
    this.send_resetStudentProgress(authToken, studentId, lessonid);
    return this.recv_resetStudentProgress();
  } else {
    var postData = this.send_resetStudentProgress(authToken, studentId, lessonid, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_resetStudentProgress);
  }
};

LessonServiceClient.prototype.send_resetStudentProgress = function(authToken, studentId, lessonid, callback) {
  this.output.writeMessageBegin('resetStudentProgress', Thrift.MessageType.CALL, this.seqid);
  var args = new LessonService_resetStudentProgress_args();
  args.authToken = authToken;
  args.studentId = studentId;
  args.lessonid = lessonid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LessonServiceClient.prototype.recv_resetStudentProgress = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LessonService_resetStudentProgress_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'resetStudentProgress failed: unknown result';
};
