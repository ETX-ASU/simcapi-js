//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

ActivityOpenResponse = function(args) {
  this.accepted = null;
  this.givenname = null;
  this.surname = null;
  if (args) {
    if (args.accepted !== undefined) {
      this.accepted = args.accepted;
    }
    if (args.givenname !== undefined) {
      this.givenname = args.givenname;
    }
    if (args.surname !== undefined) {
      this.surname = args.surname;
    }
  }
};
ActivityOpenResponse.prototype = {};
ActivityOpenResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.accepted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.givenname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.surname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityOpenResponse.prototype.write = function(output) {
  output.writeStructBegin('ActivityOpenResponse');
  if (this.accepted) {
    output.writeFieldBegin('accepted', Thrift.Type.BOOL, 1);
    output.writeBool(this.accepted);
    output.writeFieldEnd();
  }
  if (this.givenname) {
    output.writeFieldBegin('givenname', Thrift.Type.STRING, 2);
    output.writeString(this.givenname);
    output.writeFieldEnd();
  }
  if (this.surname) {
    output.writeFieldBegin('surname', Thrift.Type.STRING, 3);
    output.writeString(this.surname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Notification = function(args) {
  this.hasNotification = null;
  this.message = null;
  if (args) {
    if (args.hasNotification !== undefined) {
      this.hasNotification = args.hasNotification;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Notification.prototype = {};
Notification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNotification = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Notification.prototype.write = function(output) {
  output.writeStructBegin('Notification');
  if (this.hasNotification) {
    output.writeFieldBegin('hasNotification', Thrift.Type.BOOL, 1);
    output.writeBool(this.hasNotification);
    output.writeFieldEnd();
  }
  if (this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

