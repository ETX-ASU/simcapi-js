//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

SharingService_loopList_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
  }
};
SharingService_loopList_args.prototype = {};
SharingService_loopList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopList_args.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopList_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopList_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
SharingService_loopList_result.prototype = {};
SharingService_loopList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new Loop();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopList_result.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopList_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopCreate_args = function(args) {
  this.authToken = null;
  this.name = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
SharingService_loopCreate_args.prototype = {};
SharingService_loopCreate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopCreate_args.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopCreate_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopCreate_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
SharingService_loopCreate_result.prototype = {};
SharingService_loopCreate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Loop();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopCreate_result.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopCreate_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopGet_args = function(args) {
  this.authToken = null;
  this.loopId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.loopId !== undefined) {
      this.loopId = args.loopId;
    }
  }
};
SharingService_loopGet_args.prototype = {};
SharingService_loopGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loopId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopGet_args.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopGet_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.loopId) {
    output.writeFieldBegin('loopId', Thrift.Type.STRING, 2);
    output.writeString(this.loopId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopGet_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
SharingService_loopGet_result.prototype = {};
SharingService_loopGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Loop();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopGet_result.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopGet_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopRemove_args = function(args) {
  this.authToken = null;
  this.loopId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.loopId !== undefined) {
      this.loopId = args.loopId;
    }
  }
};
SharingService_loopRemove_args.prototype = {};
SharingService_loopRemove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loopId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopRemove_args.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopRemove_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.loopId) {
    output.writeFieldBegin('loopId', Thrift.Type.STRING, 2);
    output.writeString(this.loopId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopRemove_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
SharingService_loopRemove_result.prototype = {};
SharingService_loopRemove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopRemove_result.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopRemove_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopAddMember_args = function(args) {
  this.authToken = null;
  this.loopId = null;
  this.emailAddresses = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.loopId !== undefined) {
      this.loopId = args.loopId;
    }
    if (args.emailAddresses !== undefined) {
      this.emailAddresses = args.emailAddresses;
    }
  }
};
SharingService_loopAddMember_args.prototype = {};
SharingService_loopAddMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loopId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.emailAddresses = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString().value;
          this.emailAddresses.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopAddMember_args.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopAddMember_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.loopId) {
    output.writeFieldBegin('loopId', Thrift.Type.STRING, 2);
    output.writeString(this.loopId);
    output.writeFieldEnd();
  }
  if (this.emailAddresses) {
    output.writeFieldBegin('emailAddresses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.emailAddresses.length);
    for (var iter31 in this.emailAddresses)
    {
      if (this.emailAddresses.hasOwnProperty(iter31))
      {
        iter31 = this.emailAddresses[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopAddMember_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
SharingService_loopAddMember_result.prototype = {};
SharingService_loopAddMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopAddMember_result.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopAddMember_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopAddLesson_args = function(args) {
  this.authToken = null;
  this.loopId = null;
  this.lessonId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.loopId !== undefined) {
      this.loopId = args.loopId;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
  }
};
SharingService_loopAddLesson_args.prototype = {};
SharingService_loopAddLesson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loopId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopAddLesson_args.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopAddLesson_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.loopId) {
    output.writeFieldBegin('loopId', Thrift.Type.STRING, 2);
    output.writeString(this.loopId);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 3);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopAddLesson_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
SharingService_loopAddLesson_result.prototype = {};
SharingService_loopAddLesson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopAddLesson_result.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopAddLesson_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopRemoveLesson_args = function(args) {
  this.authToken = null;
  this.loopId = null;
  this.lessonId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.loopId !== undefined) {
      this.loopId = args.loopId;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
  }
};
SharingService_loopRemoveLesson_args.prototype = {};
SharingService_loopRemoveLesson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loopId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopRemoveLesson_args.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopRemoveLesson_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.loopId) {
    output.writeFieldBegin('loopId', Thrift.Type.STRING, 2);
    output.writeString(this.loopId);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 3);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_loopRemoveLesson_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
SharingService_loopRemoveLesson_result.prototype = {};
SharingService_loopRemoveLesson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_loopRemoveLesson_result.prototype.write = function(output) {
  output.writeStructBegin('SharingService_loopRemoveLesson_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_getLessonPermissions_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
  }
};
SharingService_getLessonPermissions_args.prototype = {};
SharingService_getLessonPermissions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_getLessonPermissions_args.prototype.write = function(output) {
  output.writeStructBegin('SharingService_getLessonPermissions_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_getLessonPermissions_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
SharingService_getLessonPermissions_result.prototype = {};
SharingService_getLessonPermissions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new LoopMember();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_getLessonPermissions_result.prototype.write = function(output) {
  output.writeStructBegin('SharingService_getLessonPermissions_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_setLessonPermissions_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  this.permissions = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
    if (args.permissions !== undefined) {
      this.permissions = args.permissions;
    }
  }
};
SharingService_setLessonPermissions_args.prototype = {};
SharingService_setLessonPermissions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.permissions = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new LoopMember();
          elem46.read(input);
          this.permissions.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_setLessonPermissions_args.prototype.write = function(output) {
  output.writeStructBegin('SharingService_setLessonPermissions_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  if (this.permissions) {
    output.writeFieldBegin('permissions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.permissions.length);
    for (var iter47 in this.permissions)
    {
      if (this.permissions.hasOwnProperty(iter47))
      {
        iter47 = this.permissions[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingService_setLessonPermissions_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
SharingService_setLessonPermissions_result.prototype = {};
SharingService_setLessonPermissions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharingService_setLessonPermissions_result.prototype.write = function(output) {
  output.writeStructBegin('SharingService_setLessonPermissions_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharingServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
SharingServiceClient.prototype = {};
SharingServiceClient.prototype.loopList = function(authToken, callback) {
  if (callback === undefined) {
    this.send_loopList(authToken);
    return this.recv_loopList();
  } else {
    var postData = this.send_loopList(authToken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loopList);
  }
};

SharingServiceClient.prototype.send_loopList = function(authToken, callback) {
  this.output.writeMessageBegin('loopList', Thrift.MessageType.CALL, this.seqid);
  var args = new SharingService_loopList_args();
  args.authToken = authToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SharingServiceClient.prototype.recv_loopList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharingService_loopList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loopList failed: unknown result';
};
SharingServiceClient.prototype.loopCreate = function(authToken, name, callback) {
  if (callback === undefined) {
    this.send_loopCreate(authToken, name);
    return this.recv_loopCreate();
  } else {
    var postData = this.send_loopCreate(authToken, name, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loopCreate);
  }
};

SharingServiceClient.prototype.send_loopCreate = function(authToken, name, callback) {
  this.output.writeMessageBegin('loopCreate', Thrift.MessageType.CALL, this.seqid);
  var args = new SharingService_loopCreate_args();
  args.authToken = authToken;
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SharingServiceClient.prototype.recv_loopCreate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharingService_loopCreate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loopCreate failed: unknown result';
};
SharingServiceClient.prototype.loopGet = function(authToken, loopId, callback) {
  if (callback === undefined) {
    this.send_loopGet(authToken, loopId);
    return this.recv_loopGet();
  } else {
    var postData = this.send_loopGet(authToken, loopId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loopGet);
  }
};

SharingServiceClient.prototype.send_loopGet = function(authToken, loopId, callback) {
  this.output.writeMessageBegin('loopGet', Thrift.MessageType.CALL, this.seqid);
  var args = new SharingService_loopGet_args();
  args.authToken = authToken;
  args.loopId = loopId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SharingServiceClient.prototype.recv_loopGet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharingService_loopGet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loopGet failed: unknown result';
};
SharingServiceClient.prototype.loopRemove = function(authToken, loopId, callback) {
  if (callback === undefined) {
    this.send_loopRemove(authToken, loopId);
    this.recv_loopRemove();
  } else {
    var postData = this.send_loopRemove(authToken, loopId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loopRemove);
  }
};

SharingServiceClient.prototype.send_loopRemove = function(authToken, loopId, callback) {
  this.output.writeMessageBegin('loopRemove', Thrift.MessageType.CALL, this.seqid);
  var args = new SharingService_loopRemove_args();
  args.authToken = authToken;
  args.loopId = loopId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SharingServiceClient.prototype.recv_loopRemove = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharingService_loopRemove_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
SharingServiceClient.prototype.loopAddMember = function(authToken, loopId, emailAddresses, callback) {
  if (callback === undefined) {
    this.send_loopAddMember(authToken, loopId, emailAddresses);
    this.recv_loopAddMember();
  } else {
    var postData = this.send_loopAddMember(authToken, loopId, emailAddresses, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loopAddMember);
  }
};

SharingServiceClient.prototype.send_loopAddMember = function(authToken, loopId, emailAddresses, callback) {
  this.output.writeMessageBegin('loopAddMember', Thrift.MessageType.CALL, this.seqid);
  var args = new SharingService_loopAddMember_args();
  args.authToken = authToken;
  args.loopId = loopId;
  args.emailAddresses = emailAddresses;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SharingServiceClient.prototype.recv_loopAddMember = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharingService_loopAddMember_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
SharingServiceClient.prototype.loopAddLesson = function(authToken, loopId, lessonId, callback) {
  if (callback === undefined) {
    this.send_loopAddLesson(authToken, loopId, lessonId);
    this.recv_loopAddLesson();
  } else {
    var postData = this.send_loopAddLesson(authToken, loopId, lessonId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loopAddLesson);
  }
};

SharingServiceClient.prototype.send_loopAddLesson = function(authToken, loopId, lessonId, callback) {
  this.output.writeMessageBegin('loopAddLesson', Thrift.MessageType.CALL, this.seqid);
  var args = new SharingService_loopAddLesson_args();
  args.authToken = authToken;
  args.loopId = loopId;
  args.lessonId = lessonId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SharingServiceClient.prototype.recv_loopAddLesson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharingService_loopAddLesson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
SharingServiceClient.prototype.loopRemoveLesson = function(authToken, loopId, lessonId, callback) {
  if (callback === undefined) {
    this.send_loopRemoveLesson(authToken, loopId, lessonId);
    this.recv_loopRemoveLesson();
  } else {
    var postData = this.send_loopRemoveLesson(authToken, loopId, lessonId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loopRemoveLesson);
  }
};

SharingServiceClient.prototype.send_loopRemoveLesson = function(authToken, loopId, lessonId, callback) {
  this.output.writeMessageBegin('loopRemoveLesson', Thrift.MessageType.CALL, this.seqid);
  var args = new SharingService_loopRemoveLesson_args();
  args.authToken = authToken;
  args.loopId = loopId;
  args.lessonId = lessonId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SharingServiceClient.prototype.recv_loopRemoveLesson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharingService_loopRemoveLesson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
SharingServiceClient.prototype.getLessonPermissions = function(authToken, lessonId, callback) {
  if (callback === undefined) {
    this.send_getLessonPermissions(authToken, lessonId);
    return this.recv_getLessonPermissions();
  } else {
    var postData = this.send_getLessonPermissions(authToken, lessonId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getLessonPermissions);
  }
};

SharingServiceClient.prototype.send_getLessonPermissions = function(authToken, lessonId, callback) {
  this.output.writeMessageBegin('getLessonPermissions', Thrift.MessageType.CALL, this.seqid);
  var args = new SharingService_getLessonPermissions_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SharingServiceClient.prototype.recv_getLessonPermissions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharingService_getLessonPermissions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLessonPermissions failed: unknown result';
};
SharingServiceClient.prototype.setLessonPermissions = function(authToken, lessonId, permissions, callback) {
  if (callback === undefined) {
    this.send_setLessonPermissions(authToken, lessonId, permissions);
    this.recv_setLessonPermissions();
  } else {
    var postData = this.send_setLessonPermissions(authToken, lessonId, permissions, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setLessonPermissions);
  }
};

SharingServiceClient.prototype.send_setLessonPermissions = function(authToken, lessonId, permissions, callback) {
  this.output.writeMessageBegin('setLessonPermissions', Thrift.MessageType.CALL, this.seqid);
  var args = new SharingService_setLessonPermissions_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.permissions = permissions;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SharingServiceClient.prototype.recv_setLessonPermissions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SharingService_setLessonPermissions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
