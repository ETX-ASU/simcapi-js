//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

ComponentType = {
'MCQ_INPUT' : 1,
'SHORT_TEXT_INPUT' : 2,
'NUMBER_INPUT' : 3,
'SLIDER_INPUT' : 4,
'DROPDOWN_INPUT' : 5,
'LONG_TEXT_INPUT' : 6,
'BOOLEAN_INPUT' : 7,
'IFRAME_INPUT' : 8,
'DATE_INPUT' : 9,
'INFO_ICON_POPUP' : 10
};
QuestionData = function(args) {
  this.questionScore = null;
  this.tutorialScore = null;
  this.questionAttemptNumber = null;
  this.freezeTime = null;
  this.responseTime = null;
  this.checkButtonText = null;
  this.questionId = null;
  if (args) {
    if (args.questionScore !== undefined) {
      this.questionScore = args.questionScore;
    }
    if (args.tutorialScore !== undefined) {
      this.tutorialScore = args.tutorialScore;
    }
    if (args.questionAttemptNumber !== undefined) {
      this.questionAttemptNumber = args.questionAttemptNumber;
    }
    if (args.freezeTime !== undefined) {
      this.freezeTime = args.freezeTime;
    }
    if (args.responseTime !== undefined) {
      this.responseTime = args.responseTime;
    }
    if (args.checkButtonText !== undefined) {
      this.checkButtonText = args.checkButtonText;
    }
    if (args.questionId !== undefined) {
      this.questionId = args.questionId;
    }
  }
};
QuestionData.prototype = {};
QuestionData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.questionScore = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tutorialScore = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.questionAttemptNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.freezeTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.responseTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.checkButtonText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.questionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuestionData.prototype.write = function(output) {
  output.writeStructBegin('QuestionData');
  if (this.questionScore) {
    output.writeFieldBegin('questionScore', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.questionScore);
    output.writeFieldEnd();
  }
  if (this.tutorialScore) {
    output.writeFieldBegin('tutorialScore', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.tutorialScore);
    output.writeFieldEnd();
  }
  if (this.questionAttemptNumber) {
    output.writeFieldBegin('questionAttemptNumber', Thrift.Type.I32, 3);
    output.writeI32(this.questionAttemptNumber);
    output.writeFieldEnd();
  }
  if (this.freezeTime) {
    output.writeFieldBegin('freezeTime', Thrift.Type.I32, 4);
    output.writeI32(this.freezeTime);
    output.writeFieldEnd();
  }
  if (this.responseTime) {
    output.writeFieldBegin('responseTime', Thrift.Type.I32, 5);
    output.writeI32(this.responseTime);
    output.writeFieldEnd();
  }
  if (this.checkButtonText) {
    output.writeFieldBegin('checkButtonText', Thrift.Type.STRING, 6);
    output.writeString(this.checkButtonText);
    output.writeFieldEnd();
  }
  if (this.questionId) {
    output.writeFieldBegin('questionId', Thrift.Type.STRING, 7);
    output.writeString(this.questionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HtmlStageData = function(args) {
  this.content = null;
  this.vals = null;
  this.componentProperties = null;
  this.componentTypes = null;
  if (args) {
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.vals !== undefined) {
      this.vals = args.vals;
    }
    if (args.componentProperties !== undefined) {
      this.componentProperties = args.componentProperties;
    }
    if (args.componentTypes !== undefined) {
      this.componentTypes = args.componentTypes;
    }
  }
};
HtmlStageData.prototype = {};
HtmlStageData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.vals = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.vals[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.componentProperties = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          var _size16 = 0;
          var _rtmp320;
          val15 = {};
          var _ktype17 = 0;
          var _vtype18 = 0;
          _rtmp320 = input.readMapBegin();
          _ktype17 = _rtmp320.ktype;
          _vtype18 = _rtmp320.vtype;
          _size16 = _rtmp320.size;
          for (var _i21 = 0; _i21 < _size16; ++_i21)
          {
            if (_i21 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key22 = null;
            var val23 = null;
            key22 = input.readString().value;
            val23 = input.readString().value;
            val15[key22] = val23;
          }
          input.readMapEnd();
          this.componentProperties[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.componentTypes = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          if (_i29 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key30 = null;
          var val31 = null;
          key30 = input.readString().value;
          val31 = input.readI32().value;
          this.componentTypes[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HtmlStageData.prototype.write = function(output) {
  output.writeStructBegin('HtmlStageData');
  if (this.content) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 1);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.vals) {
    output.writeFieldBegin('vals', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.vals));
    for (var kiter32 in this.vals)
    {
      if (this.vals.hasOwnProperty(kiter32))
      {
        var viter33 = this.vals[kiter32];
        output.writeString(kiter32);
        output.writeString(viter33);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.componentProperties) {
    output.writeFieldBegin('componentProperties', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.componentProperties));
    for (var kiter34 in this.componentProperties)
    {
      if (this.componentProperties.hasOwnProperty(kiter34))
      {
        var viter35 = this.componentProperties[kiter34];
        output.writeString(kiter34);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter35));
        for (var kiter36 in viter35)
        {
          if (viter35.hasOwnProperty(kiter36))
          {
            var viter37 = viter35[kiter36];
            output.writeString(kiter36);
            output.writeString(viter37);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.componentTypes) {
    output.writeFieldBegin('componentTypes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.componentTypes));
    for (var kiter38 in this.componentTypes)
    {
      if (this.componentTypes.hasOwnProperty(kiter38))
      {
        var viter39 = this.componentTypes[kiter38];
        output.writeString(kiter38);
        output.writeI32(viter39);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FinishedMessage = function(args) {
  this.backgroundImgUrl = null;
  this.message = null;
  if (args) {
    if (args.backgroundImgUrl !== undefined) {
      this.backgroundImgUrl = args.backgroundImgUrl;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
FinishedMessage.prototype = {};
FinishedMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.backgroundImgUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FinishedMessage.prototype.write = function(output) {
  output.writeStructBegin('FinishedMessage');
  if (this.backgroundImgUrl) {
    output.writeFieldBegin('backgroundImgUrl', Thrift.Type.STRING, 1);
    output.writeString(this.backgroundImgUrl);
    output.writeFieldEnd();
  }
  if (this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonMetadata = function(args) {
  this.mode = null;
  this.name = null;
  this.allowHistoryNavigation = null;
  this.showScore = null;
  this.allowRestart = null;
  this.allowRetake = null;
  this.lessonId = null;
  this.viewerSkin = null;
  if (args) {
    if (args.mode !== undefined) {
      this.mode = args.mode;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.allowHistoryNavigation !== undefined) {
      this.allowHistoryNavigation = args.allowHistoryNavigation;
    }
    if (args.showScore !== undefined) {
      this.showScore = args.showScore;
    }
    if (args.allowRestart !== undefined) {
      this.allowRestart = args.allowRestart;
    }
    if (args.allowRetake !== undefined) {
      this.allowRetake = args.allowRetake;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
    if (args.viewerSkin !== undefined) {
      this.viewerSkin = args.viewerSkin;
    }
  }
};
LessonMetadata.prototype = {};
LessonMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.allowHistoryNavigation = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.showScore = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.allowRestart = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.allowRetake = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.lessonId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.viewerSkin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonMetadata.prototype.write = function(output) {
  output.writeStructBegin('LessonMetadata');
  if (this.mode) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 1);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.allowHistoryNavigation) {
    output.writeFieldBegin('allowHistoryNavigation', Thrift.Type.BOOL, 3);
    output.writeBool(this.allowHistoryNavigation);
    output.writeFieldEnd();
  }
  if (this.showScore) {
    output.writeFieldBegin('showScore', Thrift.Type.BOOL, 4);
    output.writeBool(this.showScore);
    output.writeFieldEnd();
  }
  if (this.allowRestart) {
    output.writeFieldBegin('allowRestart', Thrift.Type.BOOL, 5);
    output.writeBool(this.allowRestart);
    output.writeFieldEnd();
  }
  if (this.allowRetake) {
    output.writeFieldBegin('allowRetake', Thrift.Type.BOOL, 6);
    output.writeBool(this.allowRetake);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.I32, 7);
    output.writeI32(this.lessonId);
    output.writeFieldEnd();
  }
  if (this.viewerSkin) {
    output.writeFieldBegin('viewerSkin', Thrift.Type.STRING, 8);
    output.writeString(this.viewerSkin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AELPHtmlResponse = function(args) {
  this.correct = null;
  this.finished = null;
  this.finishedMessage = null;
  this.feedback = null;
  this.nextQuestion = null;
  this.questionData = null;
  if (args) {
    if (args.correct !== undefined) {
      this.correct = args.correct;
    }
    if (args.finished !== undefined) {
      this.finished = args.finished;
    }
    if (args.finishedMessage !== undefined) {
      this.finishedMessage = args.finishedMessage;
    }
    if (args.feedback !== undefined) {
      this.feedback = args.feedback;
    }
    if (args.nextQuestion !== undefined) {
      this.nextQuestion = args.nextQuestion;
    }
    if (args.questionData !== undefined) {
      this.questionData = args.questionData;
    }
  }
};
AELPHtmlResponse.prototype = {};
AELPHtmlResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.correct = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.finished = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.finishedMessage = new FinishedMessage();
        this.finishedMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.feedback = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new HtmlStageData();
          elem46.read(input);
          this.feedback.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.nextQuestion = new HtmlStageData();
        this.nextQuestion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.questionData = new QuestionData();
        this.questionData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AELPHtmlResponse.prototype.write = function(output) {
  output.writeStructBegin('AELPHtmlResponse');
  if (this.correct) {
    output.writeFieldBegin('correct', Thrift.Type.BOOL, 1);
    output.writeBool(this.correct);
    output.writeFieldEnd();
  }
  if (this.finished) {
    output.writeFieldBegin('finished', Thrift.Type.BOOL, 2);
    output.writeBool(this.finished);
    output.writeFieldEnd();
  }
  if (this.finishedMessage) {
    output.writeFieldBegin('finishedMessage', Thrift.Type.STRUCT, 6);
    this.finishedMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.feedback) {
    output.writeFieldBegin('feedback', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.feedback.length);
    for (var iter47 in this.feedback)
    {
      if (this.feedback.hasOwnProperty(iter47))
      {
        iter47 = this.feedback[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nextQuestion) {
    output.writeFieldBegin('nextQuestion', Thrift.Type.STRUCT, 4);
    this.nextQuestion.write(output);
    output.writeFieldEnd();
  }
  if (this.questionData) {
    output.writeFieldBegin('questionData', Thrift.Type.STRUCT, 5);
    this.questionData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Interaction = function(args) {
  this.activationURL = null;
  this.vals = null;
  if (args) {
    if (args.activationURL !== undefined) {
      this.activationURL = args.activationURL;
    }
    if (args.vals !== undefined) {
      this.vals = args.vals;
    }
  }
};
Interaction.prototype = {};
Interaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size48 = 0;
        var _rtmp352;
        this.vals = {};
        var _ktype49 = 0;
        var _vtype50 = 0;
        _rtmp352 = input.readMapBegin();
        _ktype49 = _rtmp352.ktype;
        _vtype50 = _rtmp352.vtype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          if (_i53 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key54 = null;
          var val55 = null;
          key54 = input.readString().value;
          val55 = input.readString().value;
          this.vals[key54] = val55;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Interaction.prototype.write = function(output) {
  output.writeStructBegin('Interaction');
  if (this.activationURL) {
    output.writeFieldBegin('activationURL', Thrift.Type.STRING, 1);
    output.writeString(this.activationURL);
    output.writeFieldEnd();
  }
  if (this.vals) {
    output.writeFieldBegin('vals', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.vals));
    for (var kiter56 in this.vals)
    {
      if (this.vals.hasOwnProperty(kiter56))
      {
        var viter57 = this.vals[kiter56];
        output.writeString(kiter56);
        output.writeString(viter57);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataQuery = function(args) {
  this.activationURL = null;
  this.authToken = null;
  if (args) {
    if (args.activationURL !== undefined) {
      this.activationURL = args.activationURL;
    }
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
  }
};
MetadataQuery.prototype = {};
MetadataQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataQuery.prototype.write = function(output) {
  output.writeStructBegin('MetadataQuery');
  if (this.activationURL) {
    output.writeFieldBegin('activationURL', Thrift.Type.STRING, 1);
    output.writeString(this.activationURL);
    output.writeFieldEnd();
  }
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 2);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CapiQuery = function(args) {
  this.lessonID = null;
  this.questionID = null;
  this.target = null;
  if (args) {
    if (args.lessonID !== undefined) {
      this.lessonID = args.lessonID;
    }
    if (args.questionID !== undefined) {
      this.questionID = args.questionID;
    }
    if (args.target !== undefined) {
      this.target = args.target;
    }
  }
};
CapiQuery.prototype = {};
CapiQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.lessonID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.questionID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CapiQuery.prototype.write = function(output) {
  output.writeStructBegin('CapiQuery');
  if (this.lessonID) {
    output.writeFieldBegin('lessonID', Thrift.Type.I32, 1);
    output.writeI32(this.lessonID);
    output.writeFieldEnd();
  }
  if (this.questionID) {
    output.writeFieldBegin('questionID', Thrift.Type.STRING, 2);
    output.writeString(this.questionID);
    output.writeFieldEnd();
  }
  if (this.target) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 3);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Notes = function(args) {
  this.content = null;
  if (args) {
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
Notes.prototype = {};
Notes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Notes.prototype.write = function(output) {
  output.writeStructBegin('Notes');
  if (this.content) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 1);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuestionResult = function(args) {
  this.questionResultId = null;
  this.questionName = null;
  this.questionScore = null;
  this.maxQuestionScore = null;
  if (args) {
    if (args.questionResultId !== undefined) {
      this.questionResultId = args.questionResultId;
    }
    if (args.questionName !== undefined) {
      this.questionName = args.questionName;
    }
    if (args.questionScore !== undefined) {
      this.questionScore = args.questionScore;
    }
    if (args.maxQuestionScore !== undefined) {
      this.maxQuestionScore = args.maxQuestionScore;
    }
  }
};
QuestionResult.prototype = {};
QuestionResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.questionResultId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.questionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.questionScore = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.maxQuestionScore = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuestionResult.prototype.write = function(output) {
  output.writeStructBegin('QuestionResult');
  if (this.questionResultId) {
    output.writeFieldBegin('questionResultId', Thrift.Type.STRING, 1);
    output.writeString(this.questionResultId);
    output.writeFieldEnd();
  }
  if (this.questionName) {
    output.writeFieldBegin('questionName', Thrift.Type.STRING, 2);
    output.writeString(this.questionName);
    output.writeFieldEnd();
  }
  if (this.questionScore) {
    output.writeFieldBegin('questionScore', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.questionScore);
    output.writeFieldEnd();
  }
  if (this.maxQuestionScore) {
    output.writeFieldBegin('maxQuestionScore', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.maxQuestionScore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

