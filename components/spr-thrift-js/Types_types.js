//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

LessonState = {
'INACTIVE' : 1,
'ACTIVE' : 2,
'ARCHIVE' : 3
};
StateType = {
'CORRECT' : 1,
'DEFAULT_WRONG' : 2,
'CUSTOM' : 3
};
AccessLevel = {
'VIEWER' : 1,
'EDITOR' : 10,
'OWNER' : 20
};
ActivationMode = {
'PUBLIC' : 1,
'PRIVATE' : 2
};
User = function(args) {
  this.id = null;
  this.username = null;
  this.email = null;
  this.givenName = null;
  this.surname = null;
  this.timezone = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.active = null;
  this.passwordExpired = null;
  this.password = null;
  this.thumbnail = null;
  this.instructor = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.givenName !== undefined) {
      this.givenName = args.givenName;
    }
    if (args.surname !== undefined) {
      this.surname = args.surname;
    }
    if (args.timezone !== undefined) {
      this.timezone = args.timezone;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.passwordExpired !== undefined) {
      this.passwordExpired = args.passwordExpired;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.thumbnail !== undefined) {
      this.thumbnail = args.thumbnail;
    }
    if (args.instructor !== undefined) {
      this.instructor = args.instructor;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.givenName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.surname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timezone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.passwordExpired = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.instructor = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.email) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.givenName) {
    output.writeFieldBegin('givenName', Thrift.Type.STRING, 4);
    output.writeString(this.givenName);
    output.writeFieldEnd();
  }
  if (this.surname) {
    output.writeFieldBegin('surname', Thrift.Type.STRING, 5);
    output.writeString(this.surname);
    output.writeFieldEnd();
  }
  if (this.timezone) {
    output.writeFieldBegin('timezone', Thrift.Type.STRING, 6);
    output.writeString(this.timezone);
    output.writeFieldEnd();
  }
  if (this.created) {
    output.writeFieldBegin('created', Thrift.Type.I64, 7);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 8);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 9);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.active) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 10);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.passwordExpired) {
    output.writeFieldBegin('passwordExpired', Thrift.Type.BOOL, 11);
    output.writeBool(this.passwordExpired);
    output.writeFieldEnd();
  }
  if (this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 12);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.thumbnail) {
    output.writeFieldBegin('thumbnail', Thrift.Type.STRING, 13);
    output.writeString(this.thumbnail);
    output.writeFieldEnd();
  }
  if (this.instructor) {
    output.writeFieldBegin('instructor', Thrift.Type.BOOL, 14);
    output.writeBool(this.instructor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthResult = function(args) {
  this.currentTime = null;
  this.authenticationToken = null;
  this.expiration = null;
  this.user = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.expiration !== undefined) {
      this.expiration = args.expiration;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
AuthResult.prototype = {};
AuthResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expiration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthResult.prototype.write = function(output) {
  output.writeStructBegin('AuthResult');
  if (this.currentTime) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 2);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.expiration) {
    output.writeFieldBegin('expiration', Thrift.Type.I64, 3);
    output.writeI64(this.expiration);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 4);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Metrics = function(args) {
  this.num_enrolled = null;
  this.num_finished = null;
  if (args) {
    if (args.num_enrolled !== undefined) {
      this.num_enrolled = args.num_enrolled;
    }
    if (args.num_finished !== undefined) {
      this.num_finished = args.num_finished;
    }
  }
};
Metrics.prototype = {};
Metrics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num_enrolled = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.num_finished = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Metrics.prototype.write = function(output) {
  output.writeStructBegin('Metrics');
  if (this.num_enrolled) {
    output.writeFieldBegin('num_enrolled', Thrift.Type.I32, 1);
    output.writeI32(this.num_enrolled);
    output.writeFieldEnd();
  }
  if (this.num_finished) {
    output.writeFieldBegin('num_finished', Thrift.Type.I32, 2);
    output.writeI32(this.num_finished);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

State = function(args) {
  this.uniqueId = null;
  this.name = null;
  this.type = null;
  this.correct = null;
  if (args) {
    if (args.uniqueId !== undefined) {
      this.uniqueId = args.uniqueId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.correct !== undefined) {
      this.correct = args.correct;
    }
  }
};
State.prototype = {};
State.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uniqueId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.correct = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

State.prototype.write = function(output) {
  output.writeStructBegin('State');
  if (this.uniqueId) {
    output.writeFieldBegin('uniqueId', Thrift.Type.STRING, 1);
    output.writeString(this.uniqueId);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.correct) {
    output.writeFieldBegin('correct', Thrift.Type.BOOL, 4);
    output.writeBool(this.correct);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Question = function(args) {
  this.uniqueId = null;
  this.name = null;
  this.is_sub_question = null;
  this.sub_questions = null;
  this.states = null;
  this.is_layer = null;
  if (args) {
    if (args.uniqueId !== undefined) {
      this.uniqueId = args.uniqueId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.is_sub_question !== undefined) {
      this.is_sub_question = args.is_sub_question;
    }
    if (args.sub_questions !== undefined) {
      this.sub_questions = args.sub_questions;
    }
    if (args.states !== undefined) {
      this.states = args.states;
    }
    if (args.is_layer !== undefined) {
      this.is_layer = args.is_layer;
    }
  }
};
Question.prototype = {};
Question.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uniqueId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_sub_question = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.sub_questions = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.sub_questions.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size7 = 0;
        var _rtmp311;
        this.states = {};
        var _ktype8 = 0;
        var _vtype9 = 0;
        _rtmp311 = input.readMapBegin();
        _ktype8 = _rtmp311.ktype;
        _vtype9 = _rtmp311.vtype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          if (_i12 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key13 = null;
          var val14 = null;
          key13 = input.readString().value;
          val14 = new State();
          val14.read(input);
          this.states[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.is_layer = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Question.prototype.write = function(output) {
  output.writeStructBegin('Question');
  if (this.uniqueId) {
    output.writeFieldBegin('uniqueId', Thrift.Type.STRING, 1);
    output.writeString(this.uniqueId);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.is_sub_question) {
    output.writeFieldBegin('is_sub_question', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_sub_question);
    output.writeFieldEnd();
  }
  if (this.sub_questions) {
    output.writeFieldBegin('sub_questions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.sub_questions.length);
    for (var iter15 in this.sub_questions)
    {
      if (this.sub_questions.hasOwnProperty(iter15))
      {
        iter15 = this.sub_questions[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.states) {
    output.writeFieldBegin('states', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.states));
    for (var kiter16 in this.states)
    {
      if (this.states.hasOwnProperty(kiter16))
      {
        var viter17 = this.states[kiter16];
        output.writeString(kiter16);
        viter17.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.is_layer) {
    output.writeFieldBegin('is_layer', Thrift.Type.BOOL, 6);
    output.writeBool(this.is_layer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivationOptions = function(args) {
  this.mode = null;
  this.allowLTIAutoEnrol = null;
  this.allowMultipleAttempts = null;
  this.allowRestart = null;
  this.sendEnrolmentEmail = null;
  this.emailTemplate = null;
  if (args) {
    if (args.mode !== undefined) {
      this.mode = args.mode;
    }
    if (args.allowLTIAutoEnrol !== undefined) {
      this.allowLTIAutoEnrol = args.allowLTIAutoEnrol;
    }
    if (args.allowMultipleAttempts !== undefined) {
      this.allowMultipleAttempts = args.allowMultipleAttempts;
    }
    if (args.allowRestart !== undefined) {
      this.allowRestart = args.allowRestart;
    }
    if (args.sendEnrolmentEmail !== undefined) {
      this.sendEnrolmentEmail = args.sendEnrolmentEmail;
    }
    if (args.emailTemplate !== undefined) {
      this.emailTemplate = args.emailTemplate;
    }
  }
};
ActivationOptions.prototype = {};
ActivationOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.allowLTIAutoEnrol = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.allowMultipleAttempts = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.allowRestart = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sendEnrolmentEmail = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.emailTemplate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivationOptions.prototype.write = function(output) {
  output.writeStructBegin('ActivationOptions');
  if (this.mode) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 1);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  if (this.allowLTIAutoEnrol) {
    output.writeFieldBegin('allowLTIAutoEnrol', Thrift.Type.BOOL, 2);
    output.writeBool(this.allowLTIAutoEnrol);
    output.writeFieldEnd();
  }
  if (this.allowMultipleAttempts) {
    output.writeFieldBegin('allowMultipleAttempts', Thrift.Type.BOOL, 3);
    output.writeBool(this.allowMultipleAttempts);
    output.writeFieldEnd();
  }
  if (this.allowRestart) {
    output.writeFieldBegin('allowRestart', Thrift.Type.BOOL, 4);
    output.writeBool(this.allowRestart);
    output.writeFieldEnd();
  }
  if (this.sendEnrolmentEmail) {
    output.writeFieldBegin('sendEnrolmentEmail', Thrift.Type.BOOL, 5);
    output.writeBool(this.sendEnrolmentEmail);
    output.writeFieldEnd();
  }
  if (this.emailTemplate) {
    output.writeFieldBegin('emailTemplate', Thrift.Type.STRING, 6);
    output.writeString(this.emailTemplate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LessonActivation = function(args) {
  this.lessonId = null;
  this.active = null;
  this.start_ts = null;
  this.end_ts = null;
  this.launch_url = null;
  this.options = null;
  if (args) {
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.start_ts !== undefined) {
      this.start_ts = args.start_ts;
    }
    if (args.end_ts !== undefined) {
      this.end_ts = args.end_ts;
    }
    if (args.launch_url !== undefined) {
      this.launch_url = args.launch_url;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
LessonActivation.prototype = {};
LessonActivation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.start_ts = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.end_ts = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.launch_url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ActivationOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LessonActivation.prototype.write = function(output) {
  output.writeStructBegin('LessonActivation');
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 1);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  if (this.active) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 2);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.start_ts) {
    output.writeFieldBegin('start_ts', Thrift.Type.I64, 3);
    output.writeI64(this.start_ts);
    output.writeFieldEnd();
  }
  if (this.end_ts) {
    output.writeFieldBegin('end_ts', Thrift.Type.I64, 4);
    output.writeI64(this.end_ts);
    output.writeFieldEnd();
  }
  if (this.launch_url) {
    output.writeFieldBegin('launch_url', Thrift.Type.STRING, 5);
    output.writeString(this.launch_url);
    output.writeFieldEnd();
  }
  if (this.options) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 6);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Lesson = function(args) {
  this.id = null;
  this.state = null;
  this.name = null;
  this.description = null;
  this.cover_image_url = null;
  this.metrics = null;
  this.questions = null;
  this.root_questions = null;
  this.access_level = null;
  this.activations = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.cover_image_url !== undefined) {
      this.cover_image_url = args.cover_image_url;
    }
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    }
    if (args.questions !== undefined) {
      this.questions = args.questions;
    }
    if (args.root_questions !== undefined) {
      this.root_questions = args.root_questions;
    }
    if (args.access_level !== undefined) {
      this.access_level = args.access_level;
    }
    if (args.activations !== undefined) {
      this.activations = args.activations;
    }
  }
};
Lesson.prototype = {};
Lesson.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.cover_image_url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.metrics = new Metrics();
        this.metrics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.questions = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          if (_i23 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key24 = null;
          var val25 = null;
          key24 = input.readString().value;
          val25 = new Question();
          val25.read(input);
          this.questions[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.root_questions = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString().value;
          this.root_questions.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.access_level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size33 = 0;
        var _rtmp337;
        this.activations = [];
        var _etype36 = 0;
        _rtmp337 = input.readListBegin();
        _etype36 = _rtmp337.etype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          var elem39 = null;
          elem39 = new LessonActivation();
          elem39.read(input);
          this.activations.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Lesson.prototype.write = function(output) {
  output.writeStructBegin('Lesson');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.state) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.cover_image_url) {
    output.writeFieldBegin('cover_image_url', Thrift.Type.STRING, 5);
    output.writeString(this.cover_image_url);
    output.writeFieldEnd();
  }
  if (this.metrics) {
    output.writeFieldBegin('metrics', Thrift.Type.STRUCT, 6);
    this.metrics.write(output);
    output.writeFieldEnd();
  }
  if (this.questions) {
    output.writeFieldBegin('questions', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.questions));
    for (var kiter40 in this.questions)
    {
      if (this.questions.hasOwnProperty(kiter40))
      {
        var viter41 = this.questions[kiter40];
        output.writeString(kiter40);
        viter41.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.root_questions) {
    output.writeFieldBegin('root_questions', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.root_questions.length);
    for (var iter42 in this.root_questions)
    {
      if (this.root_questions.hasOwnProperty(iter42))
      {
        iter42 = this.root_questions[iter42];
        output.writeString(iter42);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.access_level) {
    output.writeFieldBegin('access_level', Thrift.Type.I32, 9);
    output.writeI32(this.access_level);
    output.writeFieldEnd();
  }
  if (this.activations) {
    output.writeFieldBegin('activations', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.activations.length);
    for (var iter43 in this.activations)
    {
      if (this.activations.hasOwnProperty(iter43))
      {
        iter43 = this.activations[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

