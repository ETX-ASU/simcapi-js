//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ViewerService_getCompletedQuestion_args = function(args) {
  this.authToken = null;
  this.questionResultId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.questionResultId !== undefined) {
      this.questionResultId = args.questionResultId;
    }
  }
};
ViewerService_getCompletedQuestion_args.prototype = {};
ViewerService_getCompletedQuestion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.questionResultId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getCompletedQuestion_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getCompletedQuestion_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.questionResultId) {
    output.writeFieldBegin('questionResultId', Thrift.Type.STRING, 2);
    output.writeString(this.questionResultId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getCompletedQuestion_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_getCompletedQuestion_result.prototype = {};
ViewerService_getCompletedQuestion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new HtmlStageData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getCompletedQuestion_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getCompletedQuestion_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getQuestionHistory_args = function(args) {
  this.authToken = null;
  this.activationURL = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.activationURL !== undefined) {
      this.activationURL = args.activationURL;
    }
  }
};
ViewerService_getQuestionHistory_args.prototype = {};
ViewerService_getQuestionHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getQuestionHistory_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getQuestionHistory_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.activationURL) {
    output.writeFieldBegin('activationURL', Thrift.Type.STRING, 2);
    output.writeString(this.activationURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getQuestionHistory_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_getQuestionHistory_result.prototype = {};
ViewerService_getQuestionHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.success = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = new QuestionResult();
          elem64.read(input);
          this.success.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getQuestionHistory_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getQuestionHistory_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter65 in this.success)
    {
      if (this.success.hasOwnProperty(iter65))
      {
        iter65 = this.success[iter65];
        iter65.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getCurrentQuestion_args = function(args) {
  this.authToken = null;
  this.activationURL = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.activationURL !== undefined) {
      this.activationURL = args.activationURL;
    }
  }
};
ViewerService_getCurrentQuestion_args.prototype = {};
ViewerService_getCurrentQuestion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getCurrentQuestion_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getCurrentQuestion_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.activationURL) {
    output.writeFieldBegin('activationURL', Thrift.Type.STRING, 2);
    output.writeString(this.activationURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getCurrentQuestion_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_getCurrentQuestion_result.prototype = {};
ViewerService_getCurrentQuestion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AELPHtmlResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getCurrentQuestion_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getCurrentQuestion_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_processInteraction_args = function(args) {
  this.authToken = null;
  this.interaction = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.interaction !== undefined) {
      this.interaction = args.interaction;
    }
  }
};
ViewerService_processInteraction_args.prototype = {};
ViewerService_processInteraction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.interaction = new Interaction();
        this.interaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_processInteraction_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_processInteraction_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.interaction) {
    output.writeFieldBegin('interaction', Thrift.Type.STRUCT, 2);
    this.interaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_processInteraction_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_processInteraction_result.prototype = {};
ViewerService_processInteraction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AELPHtmlResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_processInteraction_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_processInteraction_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_restartLesson_args = function(args) {
  this.authToken = null;
  this.activationURL = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.activationURL !== undefined) {
      this.activationURL = args.activationURL;
    }
  }
};
ViewerService_restartLesson_args.prototype = {};
ViewerService_restartLesson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_restartLesson_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_restartLesson_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.activationURL) {
    output.writeFieldBegin('activationURL', Thrift.Type.STRING, 2);
    output.writeString(this.activationURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_restartLesson_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_restartLesson_result.prototype = {};
ViewerService_restartLesson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AELPHtmlResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_restartLesson_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_restartLesson_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_retakeLesson_args = function(args) {
  this.authToken = null;
  this.activationURL = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.activationURL !== undefined) {
      this.activationURL = args.activationURL;
    }
  }
};
ViewerService_retakeLesson_args.prototype = {};
ViewerService_retakeLesson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_retakeLesson_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_retakeLesson_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.activationURL) {
    output.writeFieldBegin('activationURL', Thrift.Type.STRING, 2);
    output.writeString(this.activationURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_retakeLesson_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_retakeLesson_result.prototype = {};
ViewerService_retakeLesson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AELPHtmlResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_retakeLesson_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_retakeLesson_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_isLessonPublic_args = function(args) {
  this.activationURL = null;
  if (args) {
    if (args.activationURL !== undefined) {
      this.activationURL = args.activationURL;
    }
  }
};
ViewerService_isLessonPublic_args.prototype = {};
ViewerService_isLessonPublic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_isLessonPublic_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_isLessonPublic_args');
  if (this.activationURL) {
    output.writeFieldBegin('activationURL', Thrift.Type.STRING, 1);
    output.writeString(this.activationURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_isLessonPublic_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_isLessonPublic_result.prototype = {};
ViewerService_isLessonPublic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_isLessonPublic_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_isLessonPublic_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getLessonMetadata_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
ViewerService_getLessonMetadata_args.prototype = {};
ViewerService_getLessonMetadata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new MetadataQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getLessonMetadata_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getLessonMetadata_args');
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getLessonMetadata_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_getLessonMetadata_result.prototype = {};
ViewerService_getLessonMetadata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LessonMetadata();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getLessonMetadata_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getLessonMetadata_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getCapiTarget_args = function(args) {
  this.authToken = null;
  this.query = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
ViewerService_getCapiTarget_args.prototype = {};
ViewerService_getCapiTarget_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new CapiQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getCapiTarget_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getCapiTarget_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getCapiTarget_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_getCapiTarget_result.prototype = {};
ViewerService_getCapiTarget_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getCapiTarget_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getCapiTarget_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getQuestionHtml_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  this.questionId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
    if (args.questionId !== undefined) {
      this.questionId = args.questionId;
    }
  }
};
ViewerService_getQuestionHtml_args.prototype = {};
ViewerService_getQuestionHtml_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.questionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getQuestionHtml_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getQuestionHtml_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  if (this.questionId) {
    output.writeFieldBegin('questionId', Thrift.Type.STRING, 3);
    output.writeString(this.questionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getQuestionHtml_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_getQuestionHtml_result.prototype = {};
ViewerService_getQuestionHtml_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new HtmlStageData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getQuestionHtml_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getQuestionHtml_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getNotes_args = function(args) {
  this.authToken = null;
  this.activationURL = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.activationURL !== undefined) {
      this.activationURL = args.activationURL;
    }
  }
};
ViewerService_getNotes_args.prototype = {};
ViewerService_getNotes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getNotes_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getNotes_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.activationURL) {
    output.writeFieldBegin('activationURL', Thrift.Type.STRING, 2);
    output.writeString(this.activationURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_getNotes_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_getNotes_result.prototype = {};
ViewerService_getNotes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Notes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_getNotes_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_getNotes_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_setNotes_args = function(args) {
  this.authToken = null;
  this.activationURL = null;
  this.notes = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.activationURL !== undefined) {
      this.activationURL = args.activationURL;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
  }
};
ViewerService_setNotes_args.prototype = {};
ViewerService_setNotes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activationURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notes = new Notes();
        this.notes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_setNotes_args.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_setNotes_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.activationURL) {
    output.writeFieldBegin('activationURL', Thrift.Type.STRING, 2);
    output.writeString(this.activationURL);
    output.writeFieldEnd();
  }
  if (this.notes) {
    output.writeFieldBegin('notes', Thrift.Type.STRUCT, 3);
    this.notes.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerService_setNotes_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
ViewerService_setNotes_result.prototype = {};
ViewerService_setNotes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ViewerService_setNotes_result.prototype.write = function(output) {
  output.writeStructBegin('ViewerService_setNotes_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ViewerServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ViewerServiceClient.prototype = {};
ViewerServiceClient.prototype.getCompletedQuestion = function(authToken, questionResultId, callback) {
  if (callback === undefined) {
    this.send_getCompletedQuestion(authToken, questionResultId);
    return this.recv_getCompletedQuestion();
  } else {
    var postData = this.send_getCompletedQuestion(authToken, questionResultId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCompletedQuestion);
  }
};

ViewerServiceClient.prototype.send_getCompletedQuestion = function(authToken, questionResultId, callback) {
  this.output.writeMessageBegin('getCompletedQuestion', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_getCompletedQuestion_args();
  args.authToken = authToken;
  args.questionResultId = questionResultId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_getCompletedQuestion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_getCompletedQuestion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCompletedQuestion failed: unknown result';
};
ViewerServiceClient.prototype.getQuestionHistory = function(authToken, activationURL, callback) {
  if (callback === undefined) {
    this.send_getQuestionHistory(authToken, activationURL);
    return this.recv_getQuestionHistory();
  } else {
    var postData = this.send_getQuestionHistory(authToken, activationURL, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getQuestionHistory);
  }
};

ViewerServiceClient.prototype.send_getQuestionHistory = function(authToken, activationURL, callback) {
  this.output.writeMessageBegin('getQuestionHistory', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_getQuestionHistory_args();
  args.authToken = authToken;
  args.activationURL = activationURL;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_getQuestionHistory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_getQuestionHistory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getQuestionHistory failed: unknown result';
};
ViewerServiceClient.prototype.getCurrentQuestion = function(authToken, activationURL, callback) {
  if (callback === undefined) {
    this.send_getCurrentQuestion(authToken, activationURL);
    return this.recv_getCurrentQuestion();
  } else {
    var postData = this.send_getCurrentQuestion(authToken, activationURL, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCurrentQuestion);
  }
};

ViewerServiceClient.prototype.send_getCurrentQuestion = function(authToken, activationURL, callback) {
  this.output.writeMessageBegin('getCurrentQuestion', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_getCurrentQuestion_args();
  args.authToken = authToken;
  args.activationURL = activationURL;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_getCurrentQuestion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_getCurrentQuestion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCurrentQuestion failed: unknown result';
};
ViewerServiceClient.prototype.processInteraction = function(authToken, interaction, callback) {
  if (callback === undefined) {
    this.send_processInteraction(authToken, interaction);
    return this.recv_processInteraction();
  } else {
    var postData = this.send_processInteraction(authToken, interaction, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_processInteraction);
  }
};

ViewerServiceClient.prototype.send_processInteraction = function(authToken, interaction, callback) {
  this.output.writeMessageBegin('processInteraction', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_processInteraction_args();
  args.authToken = authToken;
  args.interaction = interaction;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_processInteraction = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_processInteraction_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'processInteraction failed: unknown result';
};
ViewerServiceClient.prototype.restartLesson = function(authToken, activationURL, callback) {
  if (callback === undefined) {
    this.send_restartLesson(authToken, activationURL);
    return this.recv_restartLesson();
  } else {
    var postData = this.send_restartLesson(authToken, activationURL, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_restartLesson);
  }
};

ViewerServiceClient.prototype.send_restartLesson = function(authToken, activationURL, callback) {
  this.output.writeMessageBegin('restartLesson', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_restartLesson_args();
  args.authToken = authToken;
  args.activationURL = activationURL;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_restartLesson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_restartLesson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'restartLesson failed: unknown result';
};
ViewerServiceClient.prototype.retakeLesson = function(authToken, activationURL, callback) {
  if (callback === undefined) {
    this.send_retakeLesson(authToken, activationURL);
    return this.recv_retakeLesson();
  } else {
    var postData = this.send_retakeLesson(authToken, activationURL, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_retakeLesson);
  }
};

ViewerServiceClient.prototype.send_retakeLesson = function(authToken, activationURL, callback) {
  this.output.writeMessageBegin('retakeLesson', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_retakeLesson_args();
  args.authToken = authToken;
  args.activationURL = activationURL;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_retakeLesson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_retakeLesson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'retakeLesson failed: unknown result';
};
ViewerServiceClient.prototype.isLessonPublic = function(activationURL, callback) {
  if (callback === undefined) {
    this.send_isLessonPublic(activationURL);
    return this.recv_isLessonPublic();
  } else {
    var postData = this.send_isLessonPublic(activationURL, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isLessonPublic);
  }
};

ViewerServiceClient.prototype.send_isLessonPublic = function(activationURL, callback) {
  this.output.writeMessageBegin('isLessonPublic', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_isLessonPublic_args();
  args.activationURL = activationURL;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_isLessonPublic = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_isLessonPublic_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isLessonPublic failed: unknown result';
};
ViewerServiceClient.prototype.getLessonMetadata = function(query, callback) {
  if (callback === undefined) {
    this.send_getLessonMetadata(query);
    return this.recv_getLessonMetadata();
  } else {
    var postData = this.send_getLessonMetadata(query, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getLessonMetadata);
  }
};

ViewerServiceClient.prototype.send_getLessonMetadata = function(query, callback) {
  this.output.writeMessageBegin('getLessonMetadata', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_getLessonMetadata_args();
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_getLessonMetadata = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_getLessonMetadata_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLessonMetadata failed: unknown result';
};
ViewerServiceClient.prototype.getCapiTarget = function(authToken, query, callback) {
  if (callback === undefined) {
    this.send_getCapiTarget(authToken, query);
    return this.recv_getCapiTarget();
  } else {
    var postData = this.send_getCapiTarget(authToken, query, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCapiTarget);
  }
};

ViewerServiceClient.prototype.send_getCapiTarget = function(authToken, query, callback) {
  this.output.writeMessageBegin('getCapiTarget', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_getCapiTarget_args();
  args.authToken = authToken;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_getCapiTarget = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_getCapiTarget_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCapiTarget failed: unknown result';
};
ViewerServiceClient.prototype.getQuestionHtml = function(authToken, lessonId, questionId, callback) {
  if (callback === undefined) {
    this.send_getQuestionHtml(authToken, lessonId, questionId);
    return this.recv_getQuestionHtml();
  } else {
    var postData = this.send_getQuestionHtml(authToken, lessonId, questionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getQuestionHtml);
  }
};

ViewerServiceClient.prototype.send_getQuestionHtml = function(authToken, lessonId, questionId, callback) {
  this.output.writeMessageBegin('getQuestionHtml', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_getQuestionHtml_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.questionId = questionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_getQuestionHtml = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_getQuestionHtml_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getQuestionHtml failed: unknown result';
};
ViewerServiceClient.prototype.getNotes = function(authToken, activationURL, callback) {
  if (callback === undefined) {
    this.send_getNotes(authToken, activationURL);
    return this.recv_getNotes();
  } else {
    var postData = this.send_getNotes(authToken, activationURL, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getNotes);
  }
};

ViewerServiceClient.prototype.send_getNotes = function(authToken, activationURL, callback) {
  this.output.writeMessageBegin('getNotes', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_getNotes_args();
  args.authToken = authToken;
  args.activationURL = activationURL;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_getNotes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_getNotes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNotes failed: unknown result';
};
ViewerServiceClient.prototype.setNotes = function(authToken, activationURL, notes, callback) {
  if (callback === undefined) {
    this.send_setNotes(authToken, activationURL, notes);
    this.recv_setNotes();
  } else {
    var postData = this.send_setNotes(authToken, activationURL, notes, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setNotes);
  }
};

ViewerServiceClient.prototype.send_setNotes = function(authToken, activationURL, notes, callback) {
  this.output.writeMessageBegin('setNotes', Thrift.MessageType.CALL, this.seqid);
  var args = new ViewerService_setNotes_args();
  args.authToken = authToken;
  args.activationURL = activationURL;
  args.notes = notes;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ViewerServiceClient.prototype.recv_setNotes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ViewerService_setNotes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
