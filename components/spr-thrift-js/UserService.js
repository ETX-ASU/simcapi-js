//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

UserService_authenticate_args = function(args) {
  this.email = null;
  this.password = null;
  this.consumerKey = null;
  this.consumerSecret = null;
  if (args) {
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.consumerKey !== undefined) {
      this.consumerKey = args.consumerKey;
    }
    if (args.consumerSecret !== undefined) {
      this.consumerSecret = args.consumerSecret;
    }
  }
};
UserService_authenticate_args.prototype = {};
UserService_authenticate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.consumerKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.consumerSecret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_authenticate_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_authenticate_args');
  if (this.email) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.consumerKey) {
    output.writeFieldBegin('consumerKey', Thrift.Type.STRING, 3);
    output.writeString(this.consumerKey);
    output.writeFieldEnd();
  }
  if (this.consumerSecret) {
    output.writeFieldBegin('consumerSecret', Thrift.Type.STRING, 4);
    output.writeString(this.consumerSecret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_authenticate_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
UserService_authenticate_result.prototype = {};
UserService_authenticate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_authenticate_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_authenticate_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_authenticateAuthcode_args = function(args) {
  this.authcode = null;
  if (args) {
    if (args.authcode !== undefined) {
      this.authcode = args.authcode;
    }
  }
};
UserService_authenticateAuthcode_args.prototype = {};
UserService_authenticateAuthcode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authcode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_authenticateAuthcode_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_authenticateAuthcode_args');
  if (this.authcode) {
    output.writeFieldBegin('authcode', Thrift.Type.STRING, 1);
    output.writeString(this.authcode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_authenticateAuthcode_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
UserService_authenticateAuthcode_result.prototype = {};
UserService_authenticateAuthcode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_authenticateAuthcode_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_authenticateAuthcode_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_revalidate_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
  }
};
UserService_revalidate_args.prototype = {};
UserService_revalidate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_revalidate_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_revalidate_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_revalidate_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
UserService_revalidate_result.prototype = {};
UserService_revalidate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_revalidate_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_revalidate_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_validate_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
  }
};
UserService_validate_args.prototype = {};
UserService_validate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_validate_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_validate_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_validate_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
UserService_validate_result.prototype = {};
UserService_validate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_validate_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_validate_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_forgotPassword_args = function(args) {
  this.email = null;
  this.redirectTo = null;
  if (args) {
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.redirectTo !== undefined) {
      this.redirectTo = args.redirectTo;
    }
  }
};
UserService_forgotPassword_args.prototype = {};
UserService_forgotPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.redirectTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_forgotPassword_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_forgotPassword_args');
  if (this.email) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.redirectTo) {
    output.writeFieldBegin('redirectTo', Thrift.Type.STRING, 2);
    output.writeString(this.redirectTo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_forgotPassword_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
UserService_forgotPassword_result.prototype = {};
UserService_forgotPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_forgotPassword_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_forgotPassword_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_signup_args = function(args) {
  this.email = null;
  this.givenName = null;
  this.surname = null;
  this.password = null;
  this.registrationCode = null;
  this.tosAccepted = null;
  if (args) {
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.givenName !== undefined) {
      this.givenName = args.givenName;
    }
    if (args.surname !== undefined) {
      this.surname = args.surname;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.registrationCode !== undefined) {
      this.registrationCode = args.registrationCode;
    }
    if (args.tosAccepted !== undefined) {
      this.tosAccepted = args.tosAccepted;
    }
  }
};
UserService_signup_args.prototype = {};
UserService_signup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.givenName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.surname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registrationCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.tosAccepted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_signup_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_signup_args');
  if (this.email) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.givenName) {
    output.writeFieldBegin('givenName', Thrift.Type.STRING, 2);
    output.writeString(this.givenName);
    output.writeFieldEnd();
  }
  if (this.surname) {
    output.writeFieldBegin('surname', Thrift.Type.STRING, 3);
    output.writeString(this.surname);
    output.writeFieldEnd();
  }
  if (this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.registrationCode) {
    output.writeFieldBegin('registrationCode', Thrift.Type.STRING, 5);
    output.writeString(this.registrationCode);
    output.writeFieldEnd();
  }
  if (this.tosAccepted) {
    output.writeFieldBegin('tosAccepted', Thrift.Type.BOOL, 6);
    output.writeBool(this.tosAccepted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_signup_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
UserService_signup_result.prototype = {};
UserService_signup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_signup_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_signup_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_update_args = function(args) {
  this.authToken = null;
  this.user = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
UserService_update_args.prototype = {};
UserService_update_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_update_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_update_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_update_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
UserService_update_result.prototype = {};
UserService_update_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_update_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_update_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_authenticateAnonymous_args = function(args) {
};
UserService_authenticateAnonymous_args.prototype = {};
UserService_authenticateAnonymous_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_authenticateAnonymous_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_authenticateAnonymous_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_authenticateAnonymous_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
UserService_authenticateAnonymous_result.prototype = {};
UserService_authenticateAnonymous_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_authenticateAnonymous_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_authenticateAnonymous_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
UserServiceClient.prototype = {};
UserServiceClient.prototype.authenticate = function(email, password, consumerKey, consumerSecret, callback) {
  if (callback === undefined) {
    this.send_authenticate(email, password, consumerKey, consumerSecret);
    return this.recv_authenticate();
  } else {
    var postData = this.send_authenticate(email, password, consumerKey, consumerSecret, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_authenticate);
  }
};

UserServiceClient.prototype.send_authenticate = function(email, password, consumerKey, consumerSecret, callback) {
  this.output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_authenticate_args();
  args.email = email;
  args.password = password;
  args.consumerKey = consumerKey;
  args.consumerSecret = consumerSecret;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserServiceClient.prototype.recv_authenticate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_authenticate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticate failed: unknown result';
};
UserServiceClient.prototype.authenticateAuthcode = function(authcode, callback) {
  if (callback === undefined) {
    this.send_authenticateAuthcode(authcode);
    return this.recv_authenticateAuthcode();
  } else {
    var postData = this.send_authenticateAuthcode(authcode, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_authenticateAuthcode);
  }
};

UserServiceClient.prototype.send_authenticateAuthcode = function(authcode, callback) {
  this.output.writeMessageBegin('authenticateAuthcode', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_authenticateAuthcode_args();
  args.authcode = authcode;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserServiceClient.prototype.recv_authenticateAuthcode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_authenticateAuthcode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticateAuthcode failed: unknown result';
};
UserServiceClient.prototype.revalidate = function(authToken, callback) {
  if (callback === undefined) {
    this.send_revalidate(authToken);
    return this.recv_revalidate();
  } else {
    var postData = this.send_revalidate(authToken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_revalidate);
  }
};

UserServiceClient.prototype.send_revalidate = function(authToken, callback) {
  this.output.writeMessageBegin('revalidate', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_revalidate_args();
  args.authToken = authToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserServiceClient.prototype.recv_revalidate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_revalidate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'revalidate failed: unknown result';
};
UserServiceClient.prototype.validate = function(authToken, callback) {
  if (callback === undefined) {
    this.send_validate(authToken);
    return this.recv_validate();
  } else {
    var postData = this.send_validate(authToken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_validate);
  }
};

UserServiceClient.prototype.send_validate = function(authToken, callback) {
  this.output.writeMessageBegin('validate', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_validate_args();
  args.authToken = authToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserServiceClient.prototype.recv_validate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_validate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'validate failed: unknown result';
};
UserServiceClient.prototype.forgotPassword = function(email, redirectTo, callback) {
  if (callback === undefined) {
    this.send_forgotPassword(email, redirectTo);
    this.recv_forgotPassword();
  } else {
    var postData = this.send_forgotPassword(email, redirectTo, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_forgotPassword);
  }
};

UserServiceClient.prototype.send_forgotPassword = function(email, redirectTo, callback) {
  this.output.writeMessageBegin('forgotPassword', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_forgotPassword_args();
  args.email = email;
  args.redirectTo = redirectTo;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserServiceClient.prototype.recv_forgotPassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_forgotPassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
UserServiceClient.prototype.signup = function(email, givenName, surname, password, registrationCode, tosAccepted, callback) {
  if (callback === undefined) {
    this.send_signup(email, givenName, surname, password, registrationCode, tosAccepted);
    return this.recv_signup();
  } else {
    var postData = this.send_signup(email, givenName, surname, password, registrationCode, tosAccepted, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_signup);
  }
};

UserServiceClient.prototype.send_signup = function(email, givenName, surname, password, registrationCode, tosAccepted, callback) {
  this.output.writeMessageBegin('signup', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_signup_args();
  args.email = email;
  args.givenName = givenName;
  args.surname = surname;
  args.password = password;
  args.registrationCode = registrationCode;
  args.tosAccepted = tosAccepted;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserServiceClient.prototype.recv_signup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_signup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'signup failed: unknown result';
};
UserServiceClient.prototype.update = function(authToken, user, callback) {
  if (callback === undefined) {
    this.send_update(authToken, user);
    return this.recv_update();
  } else {
    var postData = this.send_update(authToken, user, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_update);
  }
};

UserServiceClient.prototype.send_update = function(authToken, user, callback) {
  this.output.writeMessageBegin('update', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_update_args();
  args.authToken = authToken;
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserServiceClient.prototype.recv_update = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_update_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'update failed: unknown result';
};
UserServiceClient.prototype.authenticateAnonymous = function(callback) {
  if (callback === undefined) {
    this.send_authenticateAnonymous();
    return this.recv_authenticateAnonymous();
  } else {
    var postData = this.send_authenticateAnonymous(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_authenticateAnonymous);
  }
};

UserServiceClient.prototype.send_authenticateAnonymous = function(callback) {
  this.output.writeMessageBegin('authenticateAnonymous', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_authenticateAnonymous_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserServiceClient.prototype.recv_authenticateAnonymous = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_authenticateAnonymous_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticateAnonymous failed: unknown result';
};
