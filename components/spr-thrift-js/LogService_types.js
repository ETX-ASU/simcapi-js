//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

Level = {
'DEBUG' : 1,
'INFO' : 2,
'WARN' : 3,
'ERROR' : 4
};
LogEntry = function(args) {
  this.time = null;
  this.level = null;
  this.caller = null;
  this.url = null;
  this.message = null;
  if (args) {
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.caller !== undefined) {
      this.caller = args.caller;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
LogEntry.prototype = {};
LogEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.caller = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogEntry.prototype.write = function(output) {
  output.writeStructBegin('LogEntry');
  if (this.time) {
    output.writeFieldBegin('time', Thrift.Type.I64, 1);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.level) {
    output.writeFieldBegin('level', Thrift.Type.I32, 2);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.caller) {
    output.writeFieldBegin('caller', Thrift.Type.STRING, 3);
    output.writeString(this.caller);
    output.writeFieldEnd();
  }
  if (this.url) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 4);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

