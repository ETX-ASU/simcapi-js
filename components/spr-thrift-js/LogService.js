//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

LogService_log_args = function(args) {
  this.logEntries = null;
  this.userId = null;
  this.version = null;
  if (args) {
    if (args.logEntries !== undefined) {
      this.logEntries = args.logEntries;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
LogService_log_args.prototype = {};
LogService_log_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.logEntries = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new LogEntry();
          elem6.read(input);
          this.logEntries.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_log_args.prototype.write = function(output) {
  output.writeStructBegin('LogService_log_args');
  if (this.logEntries) {
    output.writeFieldBegin('logEntries', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.logEntries.length);
    for (var iter7 in this.logEntries)
    {
      if (this.logEntries.hasOwnProperty(iter7))
      {
        iter7 = this.logEntries[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userId) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.version) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LogService_log_result = function(args) {
};
LogService_log_result.prototype = {};
LogService_log_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_log_result.prototype.write = function(output) {
  output.writeStructBegin('LogService_log_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LogServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
LogServiceClient.prototype = {};
LogServiceClient.prototype.log = function(logEntries, userId, version, callback) {
  if (callback === undefined) {
    this.send_log(logEntries, userId, version);
  } else {
    var postData = this.send_log(logEntries, userId, version, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_log);
  }
};

LogServiceClient.prototype.send_log = function(logEntries, userId, version, callback) {
  this.output.writeMessageBegin('log', Thrift.MessageType.CALL, this.seqid);
  var args = new LogService_log_args();
  args.logEntries = logEntries;
  args.userId = userId;
  args.version = version;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
