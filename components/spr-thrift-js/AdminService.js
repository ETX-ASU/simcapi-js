//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

spr.thrift.admin.AdminService_isSuperUser_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
  }
};
spr.thrift.admin.AdminService_isSuperUser_args.prototype = {};
spr.thrift.admin.AdminService_isSuperUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_isSuperUser_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_isSuperUser_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminService_isSuperUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
spr.thrift.admin.AdminService_isSuperUser_result.prototype = {};
spr.thrift.admin.AdminService_isSuperUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_isSuperUser_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_isSuperUser_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminService_loginAsOtherUser_args = function(args) {
  this.authToken = null;
  this.userEmail = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.userEmail !== undefined) {
      this.userEmail = args.userEmail;
    }
  }
};
spr.thrift.admin.AdminService_loginAsOtherUser_args.prototype = {};
spr.thrift.admin.AdminService_loginAsOtherUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userEmail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_loginAsOtherUser_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_loginAsOtherUser_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.userEmail) {
    output.writeFieldBegin('userEmail', Thrift.Type.STRING, 2);
    output.writeString(this.userEmail);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminService_loginAsOtherUser_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
spr.thrift.admin.AdminService_loginAsOtherUser_result.prototype = {};
spr.thrift.admin.AdminService_loginAsOtherUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_loginAsOtherUser_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_loginAsOtherUser_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminService_copyLessonToUser_args = function(args) {
  this.authToken = null;
  this.userEmail = null;
  this.lessonId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.userEmail !== undefined) {
      this.userEmail = args.userEmail;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
  }
};
spr.thrift.admin.AdminService_copyLessonToUser_args.prototype = {};
spr.thrift.admin.AdminService_copyLessonToUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userEmail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_copyLessonToUser_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_copyLessonToUser_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.userEmail) {
    output.writeFieldBegin('userEmail', Thrift.Type.STRING, 2);
    output.writeString(this.userEmail);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 3);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminService_copyLessonToUser_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
spr.thrift.admin.AdminService_copyLessonToUser_result.prototype = {};
spr.thrift.admin.AdminService_copyLessonToUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_copyLessonToUser_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_copyLessonToUser_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminService_createOrUpdateUser_args = function(args) {
  this.authToken = null;
  this.user = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
spr.thrift.admin.AdminService_createOrUpdateUser_args.prototype = {};
spr.thrift.admin.AdminService_createOrUpdateUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new spr.thrift.admin.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_createOrUpdateUser_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createOrUpdateUser_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminService_createOrUpdateUser_result = function(args) {
  this.aelpEx = null;
  if (args) {
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
spr.thrift.admin.AdminService_createOrUpdateUser_result.prototype = {};
spr.thrift.admin.AdminService_createOrUpdateUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_createOrUpdateUser_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createOrUpdateUser_result');
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminService_getGroups_args = function(args) {
  this.authToken = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
  }
};
spr.thrift.admin.AdminService_getGroups_args.prototype = {};
spr.thrift.admin.AdminService_getGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_getGroups_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getGroups_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminService_getGroups_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
spr.thrift.admin.AdminService_getGroups_result.prototype = {};
spr.thrift.admin.AdminService_getGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new spr.thrift.admin.Group();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

spr.thrift.admin.AdminService_getGroups_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getGroups_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

spr.thrift.admin.AdminServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
spr.thrift.admin.AdminServiceClient.prototype = {};
spr.thrift.admin.AdminServiceClient.prototype.isSuperUser = function(authToken, callback) {
  if (callback === undefined) {
    this.send_isSuperUser(authToken);
    return this.recv_isSuperUser();
  } else {
    var postData = this.send_isSuperUser(authToken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isSuperUser);
  }
};

spr.thrift.admin.AdminServiceClient.prototype.send_isSuperUser = function(authToken, callback) {
  this.output.writeMessageBegin('isSuperUser', Thrift.MessageType.CALL, this.seqid);
  var args = new spr.thrift.admin.AdminService_isSuperUser_args();
  args.authToken = authToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

spr.thrift.admin.AdminServiceClient.prototype.recv_isSuperUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new spr.thrift.admin.AdminService_isSuperUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'isSuperUser failed: unknown result';
};
spr.thrift.admin.AdminServiceClient.prototype.loginAsOtherUser = function(authToken, userEmail, callback) {
  if (callback === undefined) {
    this.send_loginAsOtherUser(authToken, userEmail);
    return this.recv_loginAsOtherUser();
  } else {
    var postData = this.send_loginAsOtherUser(authToken, userEmail, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loginAsOtherUser);
  }
};

spr.thrift.admin.AdminServiceClient.prototype.send_loginAsOtherUser = function(authToken, userEmail, callback) {
  this.output.writeMessageBegin('loginAsOtherUser', Thrift.MessageType.CALL, this.seqid);
  var args = new spr.thrift.admin.AdminService_loginAsOtherUser_args();
  args.authToken = authToken;
  args.userEmail = userEmail;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

spr.thrift.admin.AdminServiceClient.prototype.recv_loginAsOtherUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new spr.thrift.admin.AdminService_loginAsOtherUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loginAsOtherUser failed: unknown result';
};
spr.thrift.admin.AdminServiceClient.prototype.copyLessonToUser = function(authToken, userEmail, lessonId, callback) {
  if (callback === undefined) {
    this.send_copyLessonToUser(authToken, userEmail, lessonId);
    this.recv_copyLessonToUser();
  } else {
    var postData = this.send_copyLessonToUser(authToken, userEmail, lessonId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_copyLessonToUser);
  }
};

spr.thrift.admin.AdminServiceClient.prototype.send_copyLessonToUser = function(authToken, userEmail, lessonId, callback) {
  this.output.writeMessageBegin('copyLessonToUser', Thrift.MessageType.CALL, this.seqid);
  var args = new spr.thrift.admin.AdminService_copyLessonToUser_args();
  args.authToken = authToken;
  args.userEmail = userEmail;
  args.lessonId = lessonId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

spr.thrift.admin.AdminServiceClient.prototype.recv_copyLessonToUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new spr.thrift.admin.AdminService_copyLessonToUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
spr.thrift.admin.AdminServiceClient.prototype.createOrUpdateUser = function(authToken, user, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateUser(authToken, user);
    this.recv_createOrUpdateUser();
  } else {
    var postData = this.send_createOrUpdateUser(authToken, user, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateUser);
  }
};

spr.thrift.admin.AdminServiceClient.prototype.send_createOrUpdateUser = function(authToken, user, callback) {
  this.output.writeMessageBegin('createOrUpdateUser', Thrift.MessageType.CALL, this.seqid);
  var args = new spr.thrift.admin.AdminService_createOrUpdateUser_args();
  args.authToken = authToken;
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

spr.thrift.admin.AdminServiceClient.prototype.recv_createOrUpdateUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new spr.thrift.admin.AdminService_createOrUpdateUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  return;
};
spr.thrift.admin.AdminServiceClient.prototype.getGroups = function(authToken, callback) {
  if (callback === undefined) {
    this.send_getGroups(authToken);
    return this.recv_getGroups();
  } else {
    var postData = this.send_getGroups(authToken, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getGroups);
  }
};

spr.thrift.admin.AdminServiceClient.prototype.send_getGroups = function(authToken, callback) {
  this.output.writeMessageBegin('getGroups', Thrift.MessageType.CALL, this.seqid);
  var args = new spr.thrift.admin.AdminService_getGroups_args();
  args.authToken = authToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

spr.thrift.admin.AdminServiceClient.prototype.recv_getGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new spr.thrift.admin.AdminService_getGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroups failed: unknown result';
};
