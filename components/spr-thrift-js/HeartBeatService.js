//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

HeartBeatService_heartBeat_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
  }
};
HeartBeatService_heartBeat_args.prototype = {};
HeartBeatService_heartBeat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartBeatService_heartBeat_args.prototype.write = function(output) {
  output.writeStructBegin('HeartBeatService_heartBeat_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HeartBeatService_heartBeat_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
HeartBeatService_heartBeat_result.prototype = {};
HeartBeatService_heartBeat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Notification();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartBeatService_heartBeat_result.prototype.write = function(output) {
  output.writeStructBegin('HeartBeatService_heartBeat_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HeartBeatService_openActivity_args = function(args) {
  this.authToken = null;
  this.lessonId = null;
  if (args) {
    if (args.authToken !== undefined) {
      this.authToken = args.authToken;
    }
    if (args.lessonId !== undefined) {
      this.lessonId = args.lessonId;
    }
  }
};
HeartBeatService_openActivity_args.prototype = {};
HeartBeatService_openActivity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lessonId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartBeatService_openActivity_args.prototype.write = function(output) {
  output.writeStructBegin('HeartBeatService_openActivity_args');
  if (this.authToken) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.lessonId) {
    output.writeFieldBegin('lessonId', Thrift.Type.STRING, 2);
    output.writeString(this.lessonId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HeartBeatService_openActivity_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
HeartBeatService_openActivity_result.prototype = {};
HeartBeatService_openActivity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ActivityOpenResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartBeatService_openActivity_result.prototype.write = function(output) {
  output.writeStructBegin('HeartBeatService_openActivity_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HeartBeatService_checkNotification_args = function(args) {
};
HeartBeatService_checkNotification_args.prototype = {};
HeartBeatService_checkNotification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartBeatService_checkNotification_args.prototype.write = function(output) {
  output.writeStructBegin('HeartBeatService_checkNotification_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HeartBeatService_checkNotification_result = function(args) {
  this.success = null;
  this.aelpEx = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.aelpEx !== undefined) {
      this.aelpEx = args.aelpEx;
    }
  }
};
HeartBeatService_checkNotification_result.prototype = {};
HeartBeatService_checkNotification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Notification();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aelpEx = new AELPException();
        this.aelpEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartBeatService_checkNotification_result.prototype.write = function(output) {
  output.writeStructBegin('HeartBeatService_checkNotification_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.aelpEx) {
    output.writeFieldBegin('aelpEx', Thrift.Type.STRUCT, 1);
    this.aelpEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HeartBeatServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
HeartBeatServiceClient.prototype = {};
HeartBeatServiceClient.prototype.heartBeat = function(authToken, lessonId, callback) {
  if (callback === undefined) {
    this.send_heartBeat(authToken, lessonId);
    return this.recv_heartBeat();
  } else {
    var postData = this.send_heartBeat(authToken, lessonId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_heartBeat);
  }
};

HeartBeatServiceClient.prototype.send_heartBeat = function(authToken, lessonId, callback) {
  this.output.writeMessageBegin('heartBeat', Thrift.MessageType.CALL, this.seqid);
  var args = new HeartBeatService_heartBeat_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

HeartBeatServiceClient.prototype.recv_heartBeat = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new HeartBeatService_heartBeat_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'heartBeat failed: unknown result';
};
HeartBeatServiceClient.prototype.openActivity = function(authToken, lessonId, callback) {
  if (callback === undefined) {
    this.send_openActivity(authToken, lessonId);
    return this.recv_openActivity();
  } else {
    var postData = this.send_openActivity(authToken, lessonId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_openActivity);
  }
};

HeartBeatServiceClient.prototype.send_openActivity = function(authToken, lessonId, callback) {
  this.output.writeMessageBegin('openActivity', Thrift.MessageType.CALL, this.seqid);
  var args = new HeartBeatService_openActivity_args();
  args.authToken = authToken;
  args.lessonId = lessonId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

HeartBeatServiceClient.prototype.recv_openActivity = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new HeartBeatService_openActivity_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'openActivity failed: unknown result';
};
HeartBeatServiceClient.prototype.checkNotification = function(callback) {
  if (callback === undefined) {
    this.send_checkNotification();
    return this.recv_checkNotification();
  } else {
    var postData = this.send_checkNotification(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_checkNotification);
  }
};

HeartBeatServiceClient.prototype.send_checkNotification = function(callback) {
  this.output.writeMessageBegin('checkNotification', Thrift.MessageType.CALL, this.seqid);
  var args = new HeartBeatService_checkNotification_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

HeartBeatServiceClient.prototype.recv_checkNotification = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new HeartBeatService_checkNotification_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.aelpEx) {
    throw result.aelpEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'checkNotification failed: unknown result';
};
