//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

AELPErrorType = {
'INVALID_DOM_ID' : 1,
'INVALID_PARAMETER' : 2,
'INVALID_REQUEST' : 3
};
AELPException = function(args) {
  this.msg = null;
  this.values = null;
  this.errorType = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.values !== undefined) {
      this.values = args.values;
    }
    if (args.errorType !== undefined) {
      this.errorType = args.errorType;
    }
  }
};
Thrift.inherits(AELPException, Thrift.TException);
AELPException.prototype.name = 'AELPException';
AELPException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.values = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.values.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.errorType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AELPException.prototype.write = function(output) {
  output.writeStructBegin('AELPException');
  if (this.msg) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.values) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter7 in this.values)
    {
      if (this.values.hasOwnProperty(iter7))
      {
        iter7 = this.values[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.errorType) {
    output.writeFieldBegin('errorType', Thrift.Type.I32, 3);
    output.writeI32(this.errorType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

